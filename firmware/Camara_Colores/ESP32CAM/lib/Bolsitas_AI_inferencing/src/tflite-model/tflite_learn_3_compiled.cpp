/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 02.06.2025 19:05:17

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 74464;
#else
constexpr int kTensorArenaSize = 73440;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 12971, -30137, -23212, -24096, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00028093741275370121, 0.00015859390259720385, 0.00019991688895970583, 0.00019067121320404112, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 1,-17,-45,-31,127,-23,16,-26,61,14,30,61,-55,-23,29,-13,7,-35,-67,-2,-12,58,-41,58,-2,13,6,6,113,-36,27,3, 
  /* [1][0][][] */ 46,83,-110,-22,-61,43,127,42,-48,-72,-96,40,104,-56,103,-127,126,-108,11,-73,11,-83,-100,-12,-12,-88,70,-71,-92,-123,-24,-36, 
  /* [2][0][][] */ -46,99,21,63,-34,-16,77,36,-74,-107,68,-48,-93,64,-94,70,43,50,75,-73,-39,-1,-11,-22,18,-78,75,-127,-56,19,63,77, 
  /* [3][0][][] */ 75,-76,74,15,-45,98,41,-8,0,-104,33,95,67,-9,-127,-20,99,-78,104,-14,-117,5,-96,-18,74,-28,-88,60,-107,105,35,21, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0052830427885055542, 0.0029823665972799063, 0.0037594474852085114, 0.0035855821333825588, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 189, 26, 171, -303, 710, -127, -30, -145, 144, 965, 62, -132, 130, -605, 23, -63, -71, -289, -321, 424, 226, 422, 258, -116, -145, 45, 5, 638, 1180, 15, -275, 338, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.8872319894144312e-05, 4.956199336447753e-05, 4.4220090785529464e-05, 4.8126439651241526e-05, 6.0072372434660792e-05, 3.9049486076692119e-05, 4.2540272261248901e-05, 4.5261320337885991e-05, 4.6532601118087769e-05, 5.7692683185450733e-05, 4.2424511775607243e-05, 4.0227710996987298e-05, 4.6422825107583776e-05, 4.2812604078790173e-05, 4.2974690586561337e-05, 5.7366996770724654e-05, 4.0584363887319341e-05, 4.7144578275037929e-05, 4.6136919991113245e-05, 5.7067634770646691e-05, 5.5618715123273432e-05, 4.9704303819453344e-05, 8.8993896497413516e-05, 4.4444201193982735e-05, 4.1661183786345646e-05, 4.6577541070291772e-05, 5.5048516514943913e-05, 5.2159295591991395e-05, 6.0789217968704179e-05, 4.4174696085974574e-05, 4.11050277762115e-05, 5.8907113270834088e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -58,-41,94,1,85,-28,-77,-98,49,-82,-91,-4,19,20,-32,46,-46,-24,-62,-64,-58,-89,8,97,-127,15,74,-39,100,-4,-11,-76,64,-50,-77,53,-92,-71,-97,22,68,-80,-85,95,35,-82,92,-17,19,-54,-23,91,-63,-47,-78,92,20,65,90,-94,-50,76,-43,48,-2,15,64,78,11,79,80,-112,102,-96,37,78,-84,16,-51,16,47,28,86,7,-50,-36,-69,97,27,109,-16,-107,22,12,40,5, 
  /* [1][0][][] */ -66,18,-69,-24,-30,81,38,-10,59,-91,-92,94,26,-50,26,60,100,-30,35,118,-60,-3,31,26,36,24,-31,84,14,5,85,-47,53,92,-10,15,45,60,-28,-54,-48,10,-10,-88,-23,25,-20,-43,-28,-68,75,60,7,83,-67,-53,24,79,38,78,-74,103,-51,-85,-45,39,67,29,112,40,-9,12,-127,84,-48,35,84,-43,-34,44,-58,66,-69,-103,31,104,-64,-46,68,66,89,5,77,115,-3,13, 
  /* [2][0][][] */ 29,48,-57,71,-46,-47,88,62,-119,83,-40,96,67,-24,78,-126,-45,-18,47,6,-90,-12,116,25,-52,101,110,12,-64,95,87,67,-84,-16,-97,-106,-78,96,77,-26,-111,-99,16,5,-114,119,-34,-88,94,47,110,-86,-42,55,31,6,-76,117,-83,14,-9,62,-15,86,111,45,49,84,-100,60,20,-101,48,-101,47,32,-35,-17,7,-28,44,-100,8,-41,4,-87,-8,-26,101,127,-23,-16,-60,-48,-15,-68, 
  /* [3][0][][] */ 64,-10,26,-26,-73,42,-103,17,46,16,47,3,71,70,61,4,94,89,-54,3,93,-82,-62,-106,-29,-97,-71,87,40,-94,74,4,-52,-39,-20,-29,-86,-25,20,33,-27,-94,-100,-6,58,14,-47,-86,57,-67,26,-2,80,22,75,-95,-118,-112,-124,-55,-99,33,-31,70,49,-36,-59,-41,-32,-75,0,76,13,-101,47,-51,31,83,80,-58,-81,-127,29,73,23,36,-42,-112,-77,39,-3,-103,71,-81,-80,27, 
  /* [4][0][][] */ 58,103,28,68,-37,-43,35,52,79,78,11,55,127,-14,10,-30,-12,6,-23,-15,98,-48,77,32,0,-20,51,-13,-40,-34,-26,-40,66,99,8,-31,-19,1,-37,43,-28,-26,-32,-50,52,91,27,61,32,-45,-30,-67,-45,40,-63,20,29,-78,51,16,-2,-48,-63,-51,-68,50,18,-12,-13,-54,-52,-52,-40,27,61,64,9,0,12,-1,14,-28,-75,0,16,57,73,-3,-83,-43,44,24,23,43,-102,1, 
  /* [5][0][][] */ 78,-108,80,76,56,-125,25,42,101,-127,-5,-77,-23,112,31,38,64,65,-91,113,35,52,16,-34,-117,-72,-17,-106,57,42,13,-114,-62,-6,-70,2,-127,-49,20,20,-100,-63,38,106,-53,34,33,-61,-125,113,36,45,43,3,44,-36,123,54,-44,-49,43,-73,48,-82,-29,109,-34,22,67,-8,116,-81,-42,65,-34,-83,19,-56,9,74,113,54,32,121,-95,84,-7,47,71,-107,121,77,-21,-25,99,-112, 
  /* [6][0][][] */ 3,-57,113,61,-74,-55,3,54,-24,-76,9,-82,49,54,120,-114,48,8,5,117,-80,-117,112,63,-55,-73,0,-56,-16,-112,48,-62,-101,-122,-39,-120,-4,45,-127,82,93,62,30,-14,-109,108,-83,-40,-89,32,-42,-52,66,-50,104,-33,15,-16,-87,119,-102,11,77,-79,-47,75,104,-57,95,5,-110,2,53,-67,-92,-41,-67,-100,-54,-54,43,-27,32,-25,-65,-84,-41,-83,89,98,100,-2,-43,-42,70,-22, 
  /* [7][0][][] */ 91,50,-45,-62,-61,121,-19,-22,95,6,-97,15,19,-98,41,71,53,17,-1,127,37,30,-8,80,-63,105,41,47,-67,110,-23,44,15,17,63,80,-101,84,-35,-29,91,-73,83,61,44,-10,100,-107,40,-38,-120,-57,-24,82,20,17,112,-92,-3,-52,-16,-1,87,-114,-58,-49,61,11,-82,28,52,81,63,18,55,49,-48,49,-98,13,92,-41,-43,-76,84,31,-108,97,79,1,86,54,-52,-7,-25,-54, 
  /* [8][0][][] */ 37,37,-31,-58,50,9,-67,14,28,30,48,89,35,-16,-75,-65,-68,85,-64,-1,47,-19,77,104,-112,73,40,78,-68,-6,-82,96,95,-26,49,6,107,-2,18,72,73,99,-104,-109,-3,-23,-25,106,29,-108,-60,-10,-55,-15,-38,-83,50,96,-71,94,127,33,20,102,-39,-46,-15,107,-100,44,39,5,84,70,3,27,-61,101,82,104,27,88,-82,-72,23,37,72,-49,30,-37,-74,86,-67,-127,-36,52, 
  /* [9][0][][] */ 45,32,105,82,94,-66,-18,-34,66,53,30,53,64,-28,-59,15,15,14,-76,-41,32,96,-60,-57,115,-15,0,32,-9,-30,-53,95,75,26,47,22,-42,29,14,-1,55,-8,53,-49,80,37,-49,60,63,-22,-48,-21,61,-34,-51,87,87,-21,48,15,-44,75,82,-44,-37,18,101,74,-28,86,119,-18,26,76,-63,-49,-63,-65,-6,127,33,48,89,41,-18,-40,50,-3,82,33,-5,121,105,-18,46,-15, 
  /* [10][0][][] */ -76,77,97,-85,-30,124,116,13,23,19,12,-55,82,55,-28,-3,-23,80,-78,-87,-28,33,59,-61,17,68,-114,-107,-46,76,-94,-99,70,96,108,56,-38,8,-46,30,-38,100,-109,-36,-116,-78,-10,-71,-17,16,6,9,76,22,-60,-59,-114,-22,-6,-42,-37,78,114,28,127,-73,-96,-25,25,-13,-102,-87,62,43,-91,113,-11,64,69,-12,93,-22,50,93,-94,73,90,-23,50,21,7,-93,-69,-16,-42,-57, 
  /* [11][0][][] */ 107,3,-21,101,127,55,56,17,114,97,-89,116,-12,-93,28,-76,-61,-111,60,43,25,77,21,-119,-117,-100,-25,71,86,-7,23,-27,-105,-84,54,38,-71,78,-41,-69,-29,105,-80,0,-48,-69,-102,-98,75,111,105,60,-105,-109,20,25,-67,-80,-48,-97,-93,93,89,10,19,93,-64,25,98,60,-101,-82,32,110,-106,49,-74,30,-51,78,-112,-38,-80,-61,48,-91,7,-27,-103,-10,9,-121,-84,-38,-88,-45, 
  /* [12][0][][] */ 0,58,-51,-12,100,19,-31,35,-84,66,-8,19,-88,35,46,-66,-88,-26,-57,-46,35,-8,19,93,-55,-41,99,-91,103,22,-30,127,-79,-70,-20,4,4,-70,-23,39,112,42,-104,-30,-23,-62,-33,118,-34,-95,-55,113,41,-12,-61,87,6,-49,59,65,86,120,13,66,113,34,-40,96,56,90,47,82,97,112,0,-4,-20,38,-106,-109,-54,116,55,22,-33,32,56,114,-84,-95,78,57,116,-60,52,54, 
  /* [13][0][][] */ 102,-74,89,80,86,106,68,49,58,-112,-4,-35,80,56,54,-60,-127,-81,-70,20,52,-41,105,-60,-75,34,-5,7,-94,-90,72,27,32,93,-32,24,-95,-41,12,56,-76,62,-63,-3,-56,13,-14,-44,20,103,-45,-114,-102,27,91,-95,-54,12,-40,-86,-41,114,-86,14,-56,-75,-106,76,-40,-19,84,-16,-111,29,-83,-56,-113,54,68,-77,43,-110,79,8,-94,-115,81,109,-23,-62,-79,44,100,-49,64,-9, 
  /* [14][0][][] */ -35,-79,97,85,82,-41,-17,-87,-69,-12,74,86,0,-76,-89,-89,-63,-63,19,27,-44,34,-3,60,-94,-83,-34,42,-120,-127,-81,42,119,-23,-3,51,96,111,57,-107,-11,-108,32,86,76,-118,68,-85,124,29,82,51,99,-14,-19,20,-36,-5,116,83,-16,-86,-38,85,-91,-21,80,-77,-106,-85,-85,100,13,91,62,-68,37,-106,57,52,37,-5,-111,-31,-122,-98,-122,98,97,-1,92,-42,81,90,-21,60, 
  /* [15][0][][] */ 8,-8,-19,47,58,-61,46,-84,43,-4,-59,3,106,-13,-66,-89,72,10,-52,1,25,15,57,83,56,64,29,71,9,42,55,-91,-1,13,-61,6,-51,90,80,-53,12,75,-33,-16,17,-64,-34,-65,-9,-57,-7,16,-76,-62,-35,-9,39,50,-42,83,-57,-51,-4,79,-22,73,-54,2,-40,7,44,-71,4,-20,50,-78,-3,42,78,53,-56,35,-76,-52,-88,-27,-69,26,75,67,-75,-47,27,127,-66,95, 
  /* [16][0][][] */ -101,-15,107,-81,53,124,-55,24,39,54,-114,79,-58,-50,-55,-61,117,86,76,77,116,84,-41,56,-35,64,-65,68,-95,17,42,21,-123,74,68,38,-33,54,-78,-75,25,-49,76,95,59,109,106,-12,-65,-104,-3,127,-38,112,77,39,33,89,53,17,121,123,42,64,57,18,-38,87,52,106,-34,-10,36,90,63,91,0,105,-115,-45,19,-84,59,12,14,105,107,19,84,16,-16,90,81,-37,-81,20, 
  /* [17][0][][] */ 35,-104,22,70,-42,-110,-66,-91,35,-83,72,42,113,49,-110,42,25,44,127,100,-93,-17,8,-53,25,56,-77,22,93,-56,-34,66,-30,-26,26,4,-49,87,-66,-33,-92,-42,-21,-15,8,3,75,-105,74,100,-26,18,-19,71,83,-72,-113,74,-79,-107,22,-89,62,92,-85,-74,34,-100,-91,-7,95,23,7,-109,-66,55,98,-49,33,-55,5,-22,-77,-92,-108,62,68,-38,12,63,-96,-107,-17,91,1,14, 
  /* [18][0][][] */ -103,85,94,-81,-22,-115,-101,-3,-15,59,-111,-48,-45,26,50,-62,17,-29,53,-35,90,-48,14,-80,13,-99,-22,99,27,16,-5,28,36,-32,-115,-105,-35,10,-41,45,-54,-12,-51,-16,-116,8,6,-7,9,-24,60,19,-97,-20,-4,72,-57,13,-38,-113,76,99,3,31,-91,-127,-34,64,55,-83,-70,93,-96,-47,-84,-102,44,45,-8,-76,-62,-11,-29,-81,87,-43,59,50,-104,-75,-70,93,79,-64,22,-30, 
  /* [19][0][][] */ 31,56,80,67,49,-81,80,102,112,-43,38,14,-15,54,-33,63,54,-75,83,30,12,73,-31,17,67,-80,25,-23,-69,-104,-32,32,100,-50,33,52,14,-53,-15,-61,37,-68,-56,16,-43,38,59,-51,16,16,-9,24,-14,14,-14,19,28,90,68,-15,60,-48,53,62,-53,2,-5,23,-20,42,81,-21,-27,-81,-50,-39,-42,-71,27,127,45,-70,3,75,-56,-1,32,-5,69,25,2,69,-11,54,65,-39, 
  /* [20][0][][] */ 41,66,59,92,-9,87,22,76,31,17,-55,11,28,75,42,-38,-35,-21,-48,30,23,-27,-52,-48,117,-57,-77,40,21,15,-24,127,96,50,-3,66,36,-6,25,-70,-51,-4,-50,-73,12,-40,-24,97,57,-89,-75,37,41,113,44,16,95,57,109,75,90,-36,-43,-19,-13,-42,-32,25,2,-31,-50,95,-51,-23,33,20,81,65,91,112,73,14,64,-10,54,99,-6,62,18,75,31,102,35,41,-12,38, 
  /* [21][0][][] */ 124,70,77,-65,74,-70,78,24,20,-64,-58,55,58,37,-29,-81,-80,-23,37,-25,127,-30,67,-57,40,-79,-19,83,12,-5,1,-23,-5,24,-82,-104,97,94,-98,-22,-2,11,34,-10,-82,-75,-68,83,-24,-69,-6,73,36,61,-90,34,-49,34,-67,108,66,-72,3,-32,58,34,-19,-36,-99,5,45,76,15,-24,44,70,-100,-23,67,101,24,74,26,-66,33,-72,50,-67,-55,79,112,-100,-31,-19,18,-18, 
  /* [22][0][][] */ 30,-17,-26,-32,46,-12,61,34,-22,39,-33,-47,127,-53,-49,-37,27,46,9,-31,45,-29,23,23,50,11,-51,58,-28,-16,-27,-51,27,35,5,16,6,-1,-14,-47,4,-6,7,53,29,-52,46,-9,-28,-32,74,-6,-23,-43,-23,16,-3,-4,21,-5,68,-41,-27,-50,-30,15,-48,5,60,54,-8,-2,-33,7,35,-33,25,-20,39,96,59,-38,-17,-50,46,52,51,-12,-17,28,-16,58,15,34,-18,53, 
  /* [23][0][][] */ 91,-90,0,63,85,-118,1,-95,56,-87,79,65,36,-108,14,-42,80,-36,-108,90,84,-82,96,-38,-15,-17,74,15,59,34,65,-45,-42,44,15,26,86,-6,-103,6,-106,-5,9,-111,-71,-91,109,21,70,-114,-78,-59,71,-50,-59,80,-85,-6,95,40,-108,-98,-56,-20,23,31,-116,-97,52,-14,105,-75,-11,-33,-46,-96,36,-27,88,127,-57,-54,16,-106,86,4,106,-27,-92,39,100,-10,94,-50,-38,89, 
  /* [24][0][][] */ -103,-56,-107,-76,-82,-109,-75,-103,61,127,80,46,104,63,-46,-124,-86,39,42,-59,91,-88,-59,-40,35,-36,76,62,112,71,1,-81,-3,-34,48,20,-53,-111,53,-33,-94,-102,96,6,5,-39,21,67,-85,-40,-51,25,79,29,74,-87,-16,60,22,-4,84,-4,39,99,-113,99,-51,-127,-114,45,-60,-29,-37,26,81,105,70,-79,-112,-105,-84,-97,-74,-105,-2,62,-26,-102,23,-116,-4,-92,-30,14,-111,11, 
  /* [25][0][][] */ 73,-26,-54,4,78,-78,-97,52,49,-107,-35,26,108,-7,-100,-29,-75,43,37,-99,70,78,-13,-52,3,-32,-97,51,58,-92,36,107,124,-101,33,96,90,-66,-15,-15,-88,93,-107,4,94,31,52,26,-81,77,-55,-5,30,-17,-65,81,-31,23,-96,57,109,27,40,35,1,63,-16,-2,-104,-16,-26,-101,24,-110,54,27,60,66,16,127,40,36,-24,83,-73,-46,-104,-91,-23,-49,98,76,-114,-5,-31,-79, 
  /* [26][0][][] */ 38,-101,-22,-19,-70,10,-1,-17,-84,-95,86,72,-80,-56,17,-4,96,31,-57,-32,-1,60,78,15,52,57,13,31,14,-2,-72,13,-17,-41,-76,-81,-51,78,-43,90,-67,91,60,20,-39,50,-21,90,-23,31,-35,87,7,-22,-6,-82,79,44,38,29,-22,-69,58,-27,96,-4,-41,42,-44,85,46,86,40,-61,-69,0,39,-86,-72,6,-8,50,50,-61,73,7,-38,21,-66,81,19,1,-37,127,18,93, 
  /* [27][0][][] */ 32,32,-33,-49,-110,-82,-48,-14,61,95,51,-79,5,83,74,-12,61,2,55,-87,-54,22,-5,-5,-88,46,-72,8,52,53,-14,-10,51,74,-71,-58,-55,-43,-97,84,-65,25,30,39,82,48,67,85,93,66,77,-64,-79,-58,2,-13,81,7,-102,-54,-17,-50,-22,60,30,-26,-78,102,0,6,-67,10,94,-53,6,-50,51,-33,88,120,75,0,127,-25,-53,-52,5,42,-26,18,-25,-34,58,-16,107,41, 
  /* [28][0][][] */ 124,19,96,123,-81,-62,-37,7,53,-81,87,97,127,-27,33,119,73,89,-48,44,7,48,-57,-26,-40,40,-58,-11,-59,-90,5,6,-37,36,70,80,28,-68,32,70,87,82,-50,48,-22,-4,28,68,47,-65,-80,-35,-46,41,29,40,67,-11,80,55,-5,-37,-91,-7,31,68,19,126,-69,35,-50,8,54,59,4,-37,-112,-23,-25,112,-47,-35,77,-5,65,-54,62,-64,-75,-49,23,-38,-14,19,-105,-32, 
  /* [29][0][][] */ 36,61,59,-66,-96,17,-111,-25,76,-18,-94,-104,72,-108,-48,-61,-85,105,41,-95,-64,-30,60,11,-49,32,-29,-21,-95,-2,109,-17,32,2,-83,-59,-6,99,-34,89,44,83,-42,89,-24,101,-59,-40,13,4,75,-94,73,-104,123,45,-102,69,-69,105,-96,95,-81,-30,-56,-65,53,87,79,-86,47,-90,125,48,70,30,127,-55,-27,0,0,-93,12,-75,62,116,50,77,-19,114,68,67,-114,47,30,54, 
  /* [30][0][][] */ 25,-74,-70,33,-104,20,-72,-19,114,-18,-6,-48,-105,15,56,12,-11,34,91,-111,37,-110,-124,9,-121,19,-77,116,-18,-113,-101,1,-90,-77,-127,-61,10,-22,-10,20,88,-85,-18,97,104,-51,105,58,-78,74,18,-111,92,-54,-15,102,-87,-58,-88,-59,-109,-8,-81,-31,-113,-96,-104,89,-62,110,49,-39,-94,105,42,-95,-65,-81,-84,-67,25,26,-114,-29,-116,26,-114,107,-45,-126,75,52,-38,-5,6,-77, 
  /* [31][0][][] */ 37,-47,39,51,8,47,-34,-102,-32,-6,-63,-70,63,-127,-28,68,-26,-41,52,9,48,37,-6,87,12,-51,47,42,-49,-43,56,65,8,31,-86,3,82,-8,-77,-79,54,-59,1,35,-1,-38,-27,14,53,41,51,-21,-80,-29,-36,29,-105,77,-34,95,-75,12,72,-23,63,91,-24,-57,60,-64,-74,-21,-50,-54,22,17,-15,-21,45,49,-36,-62,78,55,53,79,-58,22,43,-15,-45,-61,-23,112,13,15, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0020770735573023558, 0.0021063846070319414, 0.0018793538911268115, 0.0020453736651688814, 0.002553075784817338, 0.0016596030909568071, 0.0018079616129398346, 0.0019236061489209533, 0.0019776355475187302, 0.0024519390426576138, 0.0018030416686087847, 0.0017096777446568012, 0.0019729700870811939, 0.0018195356242358685, 0.0018264243844896555, 0.0024380972608923912, 0.0017248354852199554, 0.0020036445930600166, 0.0019608191214501858, 0.0024253744632005692, 0.0023637954145669937, 0.002112432848662138, 0.0037822404410690069, 0.001888878527097404, 0.0017706002108752728, 0.0019795454572886229, 0.0023395619355142117, 0.0022167700808495283, 0.0025835416745394468, 0.0018774245399981737, 0.0017469635931774974, 0.0025035522412508726, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -2674, 5266, 14430, 4117, -6314, -4700, 17264, 3186, 3289, -2064, 15362, -327, -12071, 3413, 16999, 9070, 13611, 8895, -5150, -7440, 5579, 36924, 24424, 24959, 1877, 1268, 4347, 4111, 2263, -6213, 7331, -3964, -294, 6740, 146, 1225, 12317, 8051, -2561, 7513, 11927, 7658, 6656, 14314, 5250, 5235, 2279, 11444, 6527, -7505, -8115, 886, -366, -1775, 2813, 56, 369, -778, -5251, 11511, -1133, 1568, -1584, -2201, -5866, 10146, 28748, 2760, -4343, 1265, 1703, 3109, 2728, -2003, 819, 14451, -630, 16685, 21875, -354, 13755, 3386, -613, 1312, 21674, 10202, 5986, 1690, 7819, 5948, -369, -9767, 1237, -2665, -2274, -2755, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00019809500372502953, 0.00030894522205926478, 0.00016663805581629276, 0.00023010761651676148, 0.00016738942940719426, 0.00030546527705155313, 0.00019202796102035791, 0.00022641565010417253, 0.00018860962882172316, 0.00031375436810776591, 0.00012975608115084469, 0.00016426308138761669, 0.0002100849524140358, 0.00084609701298177242, 0.00018177315359935164, 0.00012768538726959378, 0.00013712829968426377, 0.00016276769747491926, 0.00038045481778681278, 0.00022519264894071966, 0.00011230725067434832, 7.3391645855735987e-05, 0.0001250446803169325, 6.7294895416125655e-05, 0.00014617333363275975, 0.00038177700480446219, 0.00068313389783725142, 0.00026217414415441453, 0.00022143631940707564, 0.00030783299007453024, 0.00019899832841474563, 0.00018817669479176402, 0.00015449295460712165, 0.00017298060993198305, 0.00025243309210054576, 0.00019765322213061154, 0.00015506071213167161, 0.00013267244503367692, 0.00023250635422300547, 0.00023638215498067439, 0.00010825140634551644, 0.00033840732066892087, 0.00022557599004358053, 0.00016183749539777637, 0.00036961454316042364, 0.00019323884043842554, 0.00021409768669400364, 0.00019119867647532374, 0.0002102464932249859, 0.00017716705042403191, 0.00019457029702607542, 0.00012118806625949219, 0.00037723840796388686, 0.00017073412891477346, 0.00027431207126937807, 0.00031086269882507622, 0.00034659521770663559, 0.00033300992799922824, 0.00029041056404821575, 0.00016251180204562843, 0.00058439420536160469, 0.00041520156082697213, 0.00016963723464868963, 0.00034706303267739713, 0.00031392867094837129, 0.00018957728752866387, 7.5603507866617292e-05, 0.00015286820416804403, 0.00026389322010800242, 0.00026590947527438402, 0.00023104225692804903, 0.00017606135224923491, 0.00050443335203453898, 0.00020992822828702629, 0.00020811374997720122, 0.00014914694475010037, 0.00021912873489782214, 0.00011086915765190497, 8.3479877503123134e-05, 0.00015243064262904227, 0.00010726643813541159, 0.00010983075480908155, 0.00011840914521599188, 0.00020127506286371499, 8.4084669651929289e-05, 0.00023293576668947935, 0.0003927765937987715, 0.00016403727931901813, 9.039844007929787e-05, 0.00034623761894181371, 0.00023309334937948734, 0.00019882344349753112, 0.00017638881399761885, 0.0003676121705211699, 0.00028734779334627092, 0.00014059571549296379, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -35,120,17,-127,-108,-10,-29,-122,-38,43,30,103,79,-102,-20,18, 
  /* [1][0][][] */ -33,26,-91,-2,-27,-67,16,-86,69,68,-73,22,10,4,29,-127, 
  /* [2][0][][] */ 0,-1,-28,43,51,23,-54,-64,127,-16,5,6,-26,119,-86,35, 
  /* [3][0][][] */ 69,-93,-15,-92,-27,-8,-19,-10,117,-16,62,51,16,58,17,127, 
  /* [4][0][][] */ -79,107,51,65,36,-26,-1,70,-5,11,1,-30,-127,-21,-20,16, 
  /* [5][0][][] */ 9,69,127,1,7,66,-70,55,-59,55,-12,-60,6,-36,-82,5, 
  /* [6][0][][] */ 35,-38,127,-97,13,24,-25,48,-50,-52,32,-24,10,67,-10,40, 
  /* [7][0][][] */ 25,127,-4,-45,105,8,8,-41,84,102,-13,6,12,-34,38,32, 
  /* [8][0][][] */ 24,-88,11,-69,-3,-47,31,-78,22,50,51,-13,31,127,67,46, 
  /* [9][0][][] */ 13,-26,-17,127,37,-12,29,-41,-48,87,18,-17,9,-55,-24,-8, 
  /* [10][0][][] */ -20,9,-79,-127,29,-13,-27,30,64,-26,30,2,-38,-35,-1,41, 
  /* [11][0][][] */ -6,25,42,-34,98,-37,94,-80,-92,58,13,33,-15,127,-60,-21, 
  /* [12][0][][] */ 67,6,-64,-11,18,-127,-2,16,-14,58,-52,-68,-48,106,-7,6, 
  /* [13][0][][] */ -24,18,-26,21,17,-127,-9,22,-5,-6,13,-8,12,-21,7,7, 
  /* [14][0][][] */ 15,-11,101,-25,86,10,-127,-84,-34,-46,35,4,-10,-75,-24,-30, 
  /* [15][0][][] */ -112,27,-22,-64,-10,10,127,34,-24,58,83,5,-17,98,71,12, 
  /* [16][0][][] */ 2,44,127,61,-3,24,77,39,-79,16,-48,-14,-4,10,30,-61, 
  /* [17][0][][] */ -38,-115,-5,32,-77,-23,-59,17,-127,-35,14,-51,0,48,57,-40, 
  /* [18][0][][] */ 14,39,10,83,43,-7,45,-17,65,33,-23,-46,25,127,53,16, 
  /* [19][0][][] */ 12,-24,71,2,103,21,-98,-57,-117,-58,-18,-127,-53,-33,25,-31, 
  /* [20][0][][] */ 61,-45,-34,-51,37,-127,-27,-4,-42,73,-45,13,-28,12,47,36, 
  /* [21][0][][] */ 57,-35,74,-25,-35,11,-2,108,1,-85,66,48,-26,127,50,86, 
  /* [22][0][][] */ -8,44,5,127,-72,27,102,47,-23,20,-19,0,19,13,20,-28, 
  /* [23][0][][] */ 68,11,116,-65,64,-6,5,62,-18,5,-2,-57,30,-19,-127,9, 
  /* [24][0][][] */ -109,55,17,5,-16,127,42,-26,-18,11,68,-26,-45,8,45,-63, 
  /* [25][0][][] */ 34,27,33,21,0,20,76,-54,-1,-127,-19,-23,0,-26,8,9, 
  /* [26][0][][] */ -42,14,-14,14,-39,-21,-44,-30,-119,-37,8,-44,18,127,-33,63, 
  /* [27][0][][] */ -9,25,17,56,30,-22,-22,-36,57,10,-19,3,1,127,-1,10, 
  /* [28][0][][] */ 6,70,22,59,127,-15,19,37,-88,-18,-39,-28,9,69,49,-21, 
  /* [29][0][][] */ 7,-4,4,2,7,14,31,40,-19,-17,-19,-127,10,-16,-28,4, 
  /* [30][0][][] */ -11,90,-35,86,-52,-10,54,-127,-59,47,-31,-21,72,40,77,77, 
  /* [31][0][][] */ -50,3,-7,-92,28,-32,-61,-84,16,96,8,-127,-71,-37,-4,36, 
  /* [32][0][][] */ -127,-87,-11,52,58,42,-27,11,9,-37,-111,52,65,1,62,73, 
  /* [33][0][][] */ -1,-56,-19,-14,-127,10,-85,-27,78,37,12,-43,37,-113,127,18, 
  /* [34][0][][] */ 41,-7,80,18,50,21,-44,89,-76,-45,80,35,5,-2,-24,127, 
  /* [35][0][][] */ -49,53,-103,21,8,-22,18,-127,93,113,-82,23,-19,-6,84,-100, 
  /* [36][0][][] */ -40,36,17,127,71,7,97,8,30,74,-13,26,-54,37,-71,-27, 
  /* [37][0][][] */ 37,-8,56,-76,-29,23,-24,-84,-95,-24,-29,-50,28,-127,66,-74, 
  /* [38][0][][] */ 48,105,-4,-52,127,-6,28,-35,119,76,-26,-1,8,-34,39,11, 
  /* [39][0][][] */ -29,47,-36,-127,-1,-12,-34,39,53,-96,-24,-19,15,80,39,36, 
  /* [40][0][][] */ -14,-25,-9,-76,29,-52,-9,-15,-127,0,-4,-28,-10,-118,78,-39, 
  /* [41][0][][] */ 0,-22,-26,-22,-6,-32,11,-19,-27,21,-48,-4,-127,13,33,28, 
  /* [42][0][][] */ 127,98,-16,-24,-80,-46,-10,-48,-7,21,91,-70,-78,49,108,-120, 
  /* [43][0][][] */ 6,105,-72,16,52,-11,127,-20,24,46,-62,-28,51,-104,-83,-60, 
  /* [44][0][][] */ -39,-25,-9,-41,63,-9,-88,-127,2,3,19,19,-19,-30,44,-53, 
  /* [45][0][][] */ -21,46,-127,-34,9,-68,40,-76,-8,28,7,-102,33,-31,51,-38, 
  /* [46][0][][] */ -3,-5,-34,-93,-3,4,30,-26,-112,-26,20,14,-16,-127,63,-22, 
  /* [47][0][][] */ 14,37,13,-18,127,-20,-33,11,-44,42,8,34,-5,1,106,-17, 
  /* [48][0][][] */ -108,-81,-30,29,49,15,4,-21,12,-16,-127,50,65,1,70,52, 
  /* [49][0][][] */ 30,13,61,102,84,18,75,25,-121,-62,-64,-81,53,127,-14,-83, 
  /* [50][0][][] */ -1,1,-115,-48,28,-127,-32,12,0,-45,21,-82,53,-27,3,-1, 
  /* [51][0][][] */ -2,50,48,6,45,-5,-8,28,-127,52,14,-111,-2,-94,-11,93, 
  /* [52][0][][] */ -19,98,25,50,102,0,15,60,45,113,-6,-77,14,127,75,26, 
  /* [53][0][][] */ -12,-42,-19,-8,-78,-6,-84,3,37,25,19,-60,18,-123,127,21, 
  /* [54][0][][] */ 66,-2,-36,12,127,81,-107,-31,-107,-22,-39,-100,8,-38,-17,-47, 
  /* [55][0][][] */ 59,-11,-29,21,57,-60,-74,-127,-37,-96,-81,0,2,-26,18,-7, 
  /* [56][0][][] */ -24,14,24,-23,2,-23,-86,60,-11,127,6,-14,22,2,-1,13, 
  /* [57][0][][] */ 2,31,-14,-17,-50,-36,127,81,-27,27,-15,-24,29,9,113,-16, 
  /* [58][0][][] */ 36,24,-127,34,76,92,-32,36,-83,-25,8,5,-41,13,11,-15, 
  /* [59][0][][] */ -72,55,127,20,-83,-45,110,93,11,10,16,-26,14,16,68,-9, 
  /* [60][0][][] */ 18,16,-29,15,30,-127,-32,2,-36,-13,-4,-36,14,-16,5,6, 
  /* [61][0][][] */ 22,-3,24,127,80,16,34,15,-106,-4,12,30,-4,20,32,-40, 
  /* [62][0][][] */ -37,127,31,-34,-31,-7,-57,57,-34,-51,-82,-71,-16,-82,-50,-40, 
  /* [63][0][][] */ -34,26,-40,127,-60,-3,-54,-28,-59,-30,-26,-38,37,63,26,38, 
  /* [64][0][][] */ 7,23,4,38,0,5,-4,95,6,20,-12,-63,-16,-127,58,-8, 
  /* [65][0][][] */ -17,-42,17,-120,38,-27,71,-35,-20,45,7,-127,-12,8,20,-65, 
  /* [66][0][][] */ 16,-14,65,-19,9,6,-5,114,1,-68,46,23,-24,127,19,88, 
  /* [67][0][][] */ 2,44,-26,-127,-22,2,-45,33,74,-114,-24,-14,38,84,68,26, 
  /* [68][0][][] */ -31,43,127,16,18,1,-19,12,-60,-11,-19,-48,1,-18,94,-29, 
  /* [69][0][][] */ 127,116,-20,-3,-65,-61,-35,-19,-10,25,126,-76,-99,60,77,-94, 
  /* [70][0][][] */ 30,-3,-83,-13,-34,22,48,127,-34,87,-27,15,38,62,-17,17, 
  /* [71][0][][] */ 3,6,6,4,9,-65,-3,17,-40,12,-68,0,-127,-4,43,39, 
  /* [72][0][][] */ 18,20,-127,28,22,-3,24,82,-42,-37,1,-16,38,15,-13,-1, 
  /* [73][0][][] */ -67,49,72,5,89,-53,-93,-127,10,-88,49,-35,-2,-59,27,-13, 
  /* [74][0][][] */ 6,25,22,127,10,-4,-67,71,-55,5,-52,44,36,-110,19,-89, 
  /* [75][0][][] */ -5,35,-21,21,22,-5,27,-14,82,19,-13,-25,11,127,-38,-4, 
  /* [76][0][][] */ 4,-7,8,13,-9,-3,-6,48,9,-28,-23,-127,-1,-11,8,9, 
  /* [77][0][][] */ -9,33,-24,127,-8,5,61,103,12,34,-1,38,-2,-16,-11,9, 
  /* [78][0][][] */ 17,-19,21,-127,21,-26,-40,27,48,-44,-2,-18,47,126,19,29, 
  /* [79][0][][] */ -10,-91,-68,-75,-127,-22,-5,-117,100,56,67,40,-7,45,64,-72, 
  /* [80][0][][] */ -44,-11,76,-84,44,-80,26,-85,-72,45,-51,-127,49,113,59,-47, 
  /* [81][0][][] */ -56,61,-127,30,78,-119,-33,60,-18,-41,76,-7,19,-5,18,-5, 
  /* [82][0][][] */ 127,-14,-23,31,31,-123,-17,19,-28,-20,-110,-7,105,9,-12,26, 
  /* [83][0][][] */ -23,61,-127,-67,-26,-17,50,-95,59,35,-50,-113,27,55,31,81, 
  /* [84][0][][] */ -40,40,104,-53,-6,-21,45,-127,-45,52,-6,-54,10,60,90,4, 
  /* [85][0][][] */ -76,127,45,-96,-63,-17,-18,-7,-68,0,-59,4,3,-6,-81,-34, 
  /* [86][0][][] */ -3,-3,-60,-11,-20,-62,127,32,4,-33,3,25,11,52,85,0, 
  /* [87][0][][] */ -19,-32,-22,-107,20,-40,49,3,-13,11,-16,-127,-4,-2,6,-38, 
  /* [88][0][][] */ 94,-20,67,5,-2,-90,20,34,-72,26,-127,-82,68,33,72,-20, 
  /* [89][0][][] */ 32,-18,-19,-53,9,1,-8,-25,-46,2,17,-76,127,-4,27,-53, 
  /* [90][0][][] */ -14,-44,51,-52,72,-5,-61,80,40,-79,-18,-35,-22,111,16,-127, 
  /* [91][0][][] */ -36,17,-5,-39,34,-14,-21,-70,-5,61,-6,-127,-45,-13,-11,20, 
  /* [92][0][][] */ -30,26,38,16,15,-127,9,6,-3,-19,8,-14,-5,-25,25,14, 
  /* [93][0][][] */ 34,-29,127,-8,-59,74,42,-47,-5,23,-62,-25,-26,6,27,-5, 
  /* [94][0][][] */ 12,1,-51,-15,54,-26,-3,-1,-23,-25,15,-49,127,-23,32,-21, 
  /* [95][0][][] */ 127,80,6,31,-99,-5,-76,-16,-20,-16,91,-38,-35,27,86,-80, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00069848226848989725, 0.0010893397266045213, 0.00058756518410518765, 0.00081135862274095416, 0.00059021450579166412, 0.0010770694352686405, 0.00067708990536630154, 0.00079834077041596174, 0.00066503684502094984, 0.0011062967823818326, 0.00045751946163363755, 0.00057919102255254984, 0.0007407587836496532, 0.0029833349399268627, 0.00064093148102983832, 0.00045021818368695676, 0.00048351386794820428, 0.00057391828158870339, 0.0013414822751656175, 0.00079402845585718751, 0.00039599495357833803, 0.00025877868756651878, 0.00044090708252042532, 0.00023728155065327883, 0.00051540666026994586, 0.0013461443595588207, 0.0024087275378406048, 0.00092442502500489354, 0.00078078365186229348, 0.0010854180436581373, 0.00070166739169508219, 0.00066351034911349416, 0.00054474157514050603, 0.00060992897488176823, 0.00089007819769904017, 0.00069692451506853104, 0.00054674351122230291, 0.00046780257252976298, 0.00081981654511764646, 0.00083348259795457125, 0.0003816940588876605, 0.0011932229390367866, 0.00079538009595125914, 0.00057063839631155133, 0.0013032595161348581, 0.00068135943729430437, 0.0007549076690338552, 0.0006741658435203135, 0.00074132834561169147, 0.00062469037948176265, 0.00068605417618528008, 0.00042730866698548198, 0.0013301412109285593, 0.00060200790176168084, 0.00096722337184473872, 0.0010961007792502642, 0.0012220934731885791, 0.0011741918278858066, 0.0010239866096526384, 0.00057301600463688374, 0.0020605719182640314, 0.0014639991568401456, 0.0005981402937322855, 0.0012237429618835449, 0.001106911338865757, 0.00066844880348071456, 0.00026657769922167063, 0.00053901271894574165, 0.00093048653798177838, 0.00093759578885510564, 0.00081465416587889194, 0.00062079168856143951, 0.0017786301905289292, 0.00074020616011694074, 0.00073380832327529788, 0.00052589160623028874, 0.00077264709398150444, 0.00039092425140552223, 0.0002943497383967042, 0.00053746986668556929, 0.00037822106969542801, 0.00038726284401491284, 0.00041751022217795253, 0.00070969515945762396, 0.00029648223426192999, 0.00082133064279332757, 0.001384928822517395, 0.00057839485816657543, 0.00031874456908553839, 0.0012208325788378716, 0.00082188629312440753, 0.00070105073973536491, 0.00062194629572331905, 0.0012961991596966982, 0.001013187225908041, 0.00049573997966945171, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -6703, 27778, -24345, -8300, -6943, 5666, 25373, -54050, -6719, 24872, 24696, 10146, -3843, 15472, -8367, 10726, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00077594065805897117, 0.00039741690852679312, 0.00023081638209987432, 0.00023937267542351037, 0.00044683722080662847, 0.00033753406023606658, 0.00041591990157030523, 0.00033099969732575119, 0.00037364961463026702, 0.00023883783433120698, 0.00076780118979513645, 0.00071131490403786302, 0.00035774760181084275, 0.0002275504230055958, 0.00045892084017395973, 0.00034724484430626035, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -18,-14,-7,-52,7,-16,-44,-3,17,3,-16,-6,-5,-21,-18,13,-2,13,-5,2,8,-19,11,-3,-2,11,6,127,24,-40,48,-4,-6,3,-1,-5,-12,7,-21,-6,-20,-5,-2,36,0,8,13,6,22,-1,-13,3,13,-15,-14,88,9,13,-28,-40,-12,32,5,-29,-34,-72,-23,38,-2,14,30,-12,-1,-43,-4,-20,-27,20,7,4,-14,-36,26,26,-6,-12,-23,-101,0,-20,4,-8,45,-37,-38,-14, 
  /* [1][0][][] */ 46,-94,-124,-78,127,-37,66,24,-21,-108,-71,-55,10,-46,-48,69,-62,16,62,62,16,52,6,-99,4,-10,-18,-85,22,-33,-76,32,-23,53,-9,-12,12,-34,-3,53,-45,33,-59,-3,-79,96,5,0,17,-84,-2,-56,-63,53,69,34,-61,-6,-20,-70,-22,-18,25,-39,-87,105,-29,-33,-39,-60,12,41,82,-117,-41,14,42,-61,50,-1,-5,-63,31,18,-72,29,-46,19,-21,-67,-14,13,45,-2,24,117, 
  /* [2][0][][] */ 0,53,-127,-17,79,70,72,61,12,-103,0,-45,-12,-18,14,-8,26,-11,-43,76,18,-22,113,-3,70,60,4,-10,74,7,55,-70,44,35,-41,57,-104,-92,-22,57,20,-43,31,-26,8,-8,12,25,-50,28,-39,11,66,-11,11,101,57,3,29,-22,-16,22,53,-11,46,-24,-28,4,-68,-35,-17,-45,-31,-85,23,78,85,67,6,-9,28,-60,13,11,-30,38,9,58,-61,7,11,-37,25,-25,-37,-4, 
  /* [3][0][][] */ 45,12,75,-37,43,-50,-3,-10,-28,-47,21,-49,-13,18,32,117,42,-4,23,5,127,43,31,17,34,-18,-19,20,-11,35,-11,92,-67,18,30,-13,-10,-44,49,61,-79,-52,65,23,9,20,-18,-71,-40,-23,-26,2,15,-69,-6,3,-98,70,38,37,-4,96,-16,-51,25,82,-14,-27,5,-13,8,-49,48,-35,55,-17,13,-7,61,66,-6,-67,22,-11,-33,-11,-3,51,-19,24,34,23,31,57,48,-18, 
  /* [4][0][][] */ 25,-7,30,2,127,33,-38,-28,-57,-47,-30,-32,-36,6,-4,73,23,-92,-34,66,-1,-7,42,-36,4,-20,-17,-39,-13,-15,45,-35,95,19,-19,6,30,11,-8,35,-23,-7,-16,5,-7,-69,-11,10,30,8,-16,5,-14,-41,7,-25,20,1,-28,20,-8,51,50,22,30,61,-11,-18,-46,2,49,76,17,-44,-37,-15,19,26,68,-29,0,-38,0,-9,-78,15,43,62,-52,33,5,-39,6,5,0,-13, 
  /* [5][0][][] */ 1,-7,-12,15,13,-24,62,-17,-8,-34,-12,-3,-16,16,6,9,0,14,5,-7,27,33,-54,73,8,2,21,-83,12,38,17,46,-22,-24,13,-47,41,14,5,-10,-9,-20,38,-59,-6,13,17,-30,-6,-17,17,-12,-9,-9,-13,-56,4,16,-29,20,67,20,2,32,5,39,5,80,3,74,6,8,7,-5,-4,60,-31,1,11,22,2,-6,-4,20,-2,9,-14,127,0,28,4,-16,7,15,-38,19, 
  /* [6][0][][] */ 22,-76,18,-60,-29,17,49,34,19,-5,-13,-75,-38,9,-27,30,19,12,-14,-6,-49,58,-3,17,-29,1,-7,-10,-25,25,49,-3,45,5,68,-7,-7,-10,64,-119,-31,77,6,-48,16,-32,-17,31,-4,35,-27,54,-8,-41,-16,-18,-5,-57,-17,18,1,66,33,-94,32,-41,6,-11,-8,12,127,-8,-44,-16,-27,19,-80,6,28,15,39,45,15,1,-20,0,23,17,27,21,44,-39,-20,-20,-20,-11, 
  /* [7][0][][] */ -23,127,39,10,115,29,66,-37,-32,-29,28,-13,-22,0,48,37,10,-20,-15,33,43,-57,46,7,-11,22,10,11,38,-11,27,21,48,-5,-44,10,16,-13,-19,105,-57,32,19,38,-34,-18,32,-39,-21,-36,26,23,11,-53,-50,58,45,6,-21,13,-3,-23,-2,9,-53,75,-33,-80,-14,-54,-10,71,-6,-32,-3,8,54,67,19,-8,-42,-29,-13,-14,6,41,-1,5,-37,36,-32,-45,-45,-11,25,12, 
  /* [8][0][][] */ -7,10,97,52,-100,12,47,-5,33,79,63,44,-1,49,12,-12,-45,-2,10,-10,-36,-65,-127,76,29,-43,54,-14,16,15,-9,34,64,-29,14,13,-27,20,-29,13,22,3,55,2,-10,-9,44,18,-99,18,38,51,-53,-47,-33,28,16,-67,-89,-5,51,-48,-48,3,-10,76,-1,-42,48,-2,-64,-32,15,64,48,-22,-33,-41,-20,30,-74,39,-24,-19,35,36,84,58,68,-29,47,54,-6,1,47,16, 
  /* [9][0][][] */ 9,-113,-23,35,78,79,-42,-43,35,-36,85,75,-16,3,75,-112,11,-31,-7,15,-51,-76,38,-24,-16,14,8,24,-25,-7,-8,-39,23,23,-99,27,9,25,-65,66,61,-55,-19,75,-8,3,-72,-44,16,22,-12,-85,42,17,-10,-32,0,62,-11,-12,-14,-59,-26,127,-91,-8,4,-11,-18,5,-62,-80,54,1,2,38,60,-74,11,-8,-19,-46,-6,19,-9,-53,50,-17,-9,-49,-52,42,-55,7,4,-42, 
  /* [10][0][][] */ -52,-24,-31,-49,-10,8,65,-21,29,13,28,57,27,7,-7,-9,-11,12,-32,-25,6,11,17,16,-15,-6,7,-127,27,-46,54,-37,10,21,7,-2,-6,43,0,-6,23,-22,26,-33,19,-2,29,19,-6,30,-17,-9,-40,-32,-12,-47,12,8,-12,-29,47,13,-7,18,-36,87,-11,-24,30,-26,-11,-17,-30,2,18,59,1,37,-22,17,-18,4,3,19,0,-7,8,122,19,7,17,14,18,-30,32,-28, 
  /* [11][0][][] */ -87,28,33,25,43,-36,-12,14,-47,-9,1,48,31,47,-27,-11,21,-9,-73,-53,12,-38,-26,26,65,3,63,-8,-19,22,-29,19,-11,16,1,0,-15,31,14,-3,4,14,-20,4,99,11,59,24,50,32,5,38,34,-70,10,-19,-73,-21,-42,-21,33,-17,-22,18,-21,-18,33,-1,50,49,-25,25,-43,15,19,-5,-14,71,-119,53,-37,23,-75,-84,127,22,63,-11,67,55,-27,-44,-34,48,-25,4, 
  /* [12][0][][] */ -7,-23,-65,-25,64,18,1,-15,-8,25,18,-12,-4,-19,56,13,-34,9,10,-9,-21,51,-52,73,-40,21,-18,100,-49,44,-44,21,-41,42,9,0,-36,-47,86,-23,-31,-47,-22,-8,-22,-23,16,55,5,-9,-17,-69,9,23,-22,-59,-13,6,28,41,2,-11,0,18,51,-88,11,82,-40,-127,15,56,27,-11,19,86,-7,-1,23,0,-15,16,-51,6,-3,-27,-18,-76,2,20,-6,1,-57,17,-16,21, 
  /* [13][0][][] */ -91,60,13,5,-53,27,-33,31,-39,-25,35,41,75,29,-2,15,-26,46,-58,-13,27,-28,43,-48,49,33,2,-13,-12,-34,-30,-127,-88,-29,6,16,-16,50,64,-11,-42,85,0,32,67,0,-13,27,63,-13,36,85,65,-64,76,-30,-42,62,25,39,45,45,-28,31,-6,-12,12,13,24,43,25,-126,17,-33,-101,5,54,44,-52,-34,95,-13,-2,-32,35,-47,117,5,3,3,-10,23,24,-34,-19,-1, 
  /* [14][0][][] */ -26,31,-1,-37,39,-1,-20,29,-96,0,13,18,-9,-48,-77,-36,-83,-21,90,13,27,-22,13,-97,-37,3,-50,-23,2,-19,-2,-45,-66,-20,22,21,-19,24,-15,-7,5,91,-80,-19,-35,22,8,18,127,-25,31,2,24,40,-93,17,-14,32,-111,7,8,10,53,28,1,30,0,9,-49,22,51,42,13,5,-36,22,54,-69,-27,-100,11,-22,19,39,27,-65,-40,9,-40,14,38,46,11,40,19,-33, 
  /* [15][0][][] */ -54,-77,3,-40,17,31,7,-59,-32,22,3,-16,44,9,40,-26,-102,-1,-35,7,-12,-29,-84,-44,-5,6,-9,27,3,-11,73,-95,1,24,32,18,-2,32,-120,2,41,-68,8,38,-12,-47,65,31,65,16,0,-127,-10,36,-6,35,38,-23,-29,63,37,1,32,1,-5,-5,-13,-6,-3,22,-7,29,-53,7,-3,-45,-40,-6,-3,16,4,57,-11,68,-4,-42,-15,-27,-32,75,40,88,-47,7,8,-10, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.032977476716041565, 0.016890218481421471, 0.0098096961155533791, 0.01017333846539259, 0.018990581855177879, 0.014345197007060051, 0.017676595598459244, 0.014067486859858036, 0.015880107879638672, 0.01015060767531395, 0.03263154998421669, 0.03023088350892067, 0.015204272232949734, 0.0096708927303552628, 0.019504135474562645, 0.014757906086742878, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 20029, 50621, -942, 1653, 17635, -8217, 1009, -822, 6828, 18263, -6834, 214, -172, 3392, 6583, -9952, -4812, 36, -146, 20636, -11954, 16221, -984, 8428, 20298, -425, -4681, 16973, 15201, -20296, 3244, 20973, 23363, -12642, 1164, 327, -1024, -536, 7353, -8437, -4417, -1430, -21908, -348, 30344, -66, 12221, -266, -17446, 2280, -15, 778, -3690, 24510, -4501, 14097, 13634, -238, 30943, -316, -8518, -1142, 2733, -348, 95, 10848, -1343, -5341, -1984, 3346, 1536, -2555, 2860, -875, -2669, -5920, 1545, -2260, 48800, -9579, -7893, -10182, -101, 1037, 62754, -13154, -10615, -28102, -10582, 9078, -4951, 29192, -826, -1479, -4107, 1808, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00012320181122049689, 0.00010571656457614154, 0.0001176029909402132, 0.0002136148395948112, 0.00017498779925517738, 0.00010006714728660882, 4.8290359700331464e-05, 7.4445619247853756e-05, 0.00026540597900748253, 0.00012630045239347965, 0.00025119420024566352, 0.00011216571147087961, 0.00019657757366076112, 0.0001844307262217626, 0.00028209234005771577, 0.00013392107211984694, 0.00020936936198268086, 0.00017859891522675753, 0.00016220899124164134, 5.0992970500374213e-05, 5.9552457969402894e-05, 6.605034286621958e-05, 0.00011674463166855276, 8.0780606367625296e-05, 7.1748007030691952e-05, 0.00012415196397341788, 0.00012886544573120773, 0.00015771009202580899, 9.0517794888000935e-05, 0.00039504625601693988, 0.00029070195159874856, 0.00024908088380470872, 0.00012453200179152191, 0.00011064526916015893, 0.00020102965936530381, 0.00048289229744113982, 0.00038875793688930571, 0.00022839820303488523, 0.00025166236446239054, 8.9636756456457078e-05, 0.00018988861120305955, 0.00017622327140998095, 0.00021971964451950043, 0.00010380535968579352, 0.00053869874682277441, 0.00010013631981564686, 9.201295324601233e-05, 0.00026099674869328737, 0.00063886621501296759, 0.00011338310287101194, 0.00048756171599961817, 0.00012686607078649104, 0.00014637938875239342, 0.00010879450564971194, 0.00017575146921444684, 0.00012732202594634145, 0.00018805348372552544, 0.0003423442249186337, 6.1288119468372315e-05, 0.00018169243412557989, 0.00028373405802994967, 0.00025043325149454176, 0.00011603967141127214, 0.00012601180060300976, 0.00010763977479655296, 0.00014151533832773566, 0.00024186122755054384, 0.00040632937452755868, 0.00019772940140683204, 0.00013167601719032973, 0.00023044475528877228, 8.5870502516627312e-05, 0.00027885125018656254, 0.00013320143625605851, 0.00028758769622072577, 0.00031472207047045231, 0.0001483798841945827, 9.3298418505582958e-05, 5.3535397455561906e-05, 0.00012629256525542587, 0.0001228600594913587, 0.00017417701019439846, 0.00016082853835541755, 0.00029172821086831391, 5.604716352536343e-05, 0.0001332261017523706, 6.1707498389296234e-05, 0.00035351575934328139, 0.00026893036556430161, 9.8607757536228746e-05, 0.00027784038684330881, 3.3172276744153351e-05, 0.00012694826000370085, 9.6438270702492446e-05, 0.00030784969567321241, 0.00025368263595737517, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-71,-12,127,22,76,85,-54,-12,-22,-13,-4,-29,-7,36,6,-11,-40,28,20,19,-127,127,9,-83,12,50,-27,-127,-127,38,26,11,29,62,-20,-34,-10,33,-4,-15,28,-104,70,24,-65,35,46,-19,51,-24,19,4,-6,15,46,-90,-48,-63,-21,-11,3,13,41,64,-25,78,13,-10,12,18,127,24,23,25,-1,-9,16,127,-8,-14,16,-27,18,121,22,-78,-17,7,-35,-15,-38,4,-26,-17,27, 127,-125,70,107,-42,127,49,-111,67,1,-16,127,127,-94,-14,18,11,127,127,-110,127,-75,78,72,-127,-106,-69,-34,-59,45,-60,-20,-93,53,-127,-86,-46,-13,-54,71,-2,127,127,88,-50,-106,-114,-51,-16,-127,41,82,63,-30,45,81,-44,44,-80,-114,-46,-38,-61,70,69,-60,31,33,-80,27,-19,89,116,127,13,19,1,58,-31,52,65,127,127,-24,-8,75,-113,127,-100,-101,4,-127,-88,-127,-41,103, -72,-11,27,-81,14,-27,79,-4,77,-39,-27,20,-18,-8,-9,-9,-8,-15,8,-3,-25,-98,32,6,-120,96,4,-54,117,49,-16,9,0,16,13,-31,-11,37,21,15,24,12,-118,71,18,-17,35,13,-15,10,-15,5,-11,1,-3,22,-64,6,-35,51,1,42,34,4,-8,-38,-29,23,2,-3,-4,37,10,-24,-3,4,-10,-6,-86,0,-22,-24,-20,2,-111,10,-34,-24,-35,22,-25,-32,31,-27,-15,0, 
  /* [0][1][][] */ -69,-74,70,-38,-47,104,22,127,-49,-21,1,-108,25,-111,77,36,-3,-56,-17,88,54,-64,47,48,-90,-9,127,-21,-28,63,122,-101,-127,92,-87,-58,-39,37,-33,106,-51,-25,-3,48,-47,127,-24,67,18,94,20,-3,14,-55,28,32,127,125,-74,-86,127,-29,-36,127,68,-37,-15,-2,127,37,127,95,-40,102,-3,11,13,14,-32,9,-42,127,-76,111,1,36,-55,30,82,-127,-31,-6,127,-69,-25,2, 65,127,54,-114,127,84,95,39,-127,127,127,-35,-64,-127,-127,127,127,-61,-127,-48,106,105,-124,127,-103,-85,-46,127,-127,108,-127,-127,-89,127,113,127,127,-127,-112,127,-67,-96,111,-127,-127,-32,-127,-127,127,-110,79,41,127,127,127,-127,102,-127,-127,127,20,-75,-127,-100,-127,127,-127,127,-122,-127,-105,-81,-127,-77,127,127,-127,127,-77,127,127,28,-45,-127,59,127,95,48,127,13,127,-1,-69,36,127,-127, -58,-12,-49,36,-55,-97,45,-21,18,-37,-27,91,3,96,13,15,-3,64,-7,127,4,-81,-41,13,-74,102,-75,-19,-72,-17,16,-64,-73,42,5,-18,-32,50,-71,52,127,-5,-40,36,-41,-54,15,47,10,118,-11,5,-38,-73,4,20,96,4,-4,21,-37,127,91,-48,-43,13,33,-13,-72,119,-17,-82,-1,-46,-13,-19,25,14,72,-37,-70,-50,56,15,-47,-16,73,22,32,58,-43,25,-46,94,-28,-3, 
  /* [0][2][][] */ -71,1,-7,-23,12,-45,71,26,55,-29,-34,-6,16,19,-27,7,-7,66,8,2,-55,-110,4,-11,-22,-44,33,-68,86,38,25,29,16,-5,-11,-47,-9,38,-6,2,-18,-6,-65,109,3,33,11,37,-14,-31,11,-21,22,0,8,17,-69,24,-13,12,16,1,-19,-10,-1,-45,-48,15,-30,18,24,28,14,-23,25,5,18,5,-76,-13,-9,-12,17,15,-127,10,14,-45,-45,-51,-27,-48,9,58,-21,-7, 123,34,-127,-37,-72,-22,46,31,-62,-34,-19,-108,-77,117,-13,46,4,-49,-9,-122,91,-72,-36,1,-108,127,-51,20,-39,-22,-8,-6,-64,19,27,5,-25,-30,127,63,9,-14,70,-28,-41,74,-67,-45,-33,-7,-127,-127,-51,-25,2,42,-62,-6,11,38,-9,-16,10,-53,-54,32,61,-24,115,117,-23,-70,12,-59,2,5,97,4,54,24,11,-108,-53,4,-1,9,127,40,-50,38,-19,-112,40,80,-13,24, -57,14,-20,26,14,-73,-127,5,-11,-9,-16,-3,13,-21,18,1,-7,-15,7,18,-50,-80,17,2,15,-89,22,4,-52,-39,-7,16,39,-11,-6,-26,-39,2,40,-40,22,-2,-49,-27,2,66,22,16,-8,-5,9,-9,19,4,-5,-3,-60,-11,-3,-39,-14,10,90,-18,33,-2,-5,25,-1,7,-5,18,-16,12,-3,16,35,1,78,-13,2,-14,-10,-16,66,2,42,-40,59,40,-17,-50,-8,3,-17,-14, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0052360766567289829, 0.0044929538853466511, 0.0049981269985437393, 0.0090786302462220192, 0.0074369814246892929, 0.0042528538033366203, 0.0020523401908576488, 0.0031639386434108019, 0.011279753409326077, 0.00536776939406991, 0.010675753466784954, 0.0047670425847172737, 0.0083545465022325516, 0.0078383060172200203, 0.011988924816250801, 0.0056916456669569016, 0.0088981976732611656, 0.0075904536060988903, 0.0068938820622861385, 0.0021672011353075504, 0.0025309794582426548, 0.0028071396518498659, 0.0049616466276347637, 0.0034331758506596088, 0.0030492902733385563, 0.0052764583379030228, 0.0054767811670899391, 0.0067026787437498569, 0.0038470062427222729, 0.016789466142654419, 0.012354833073914051, 0.010585937649011612, 0.0052926097996532917, 0.0047024236992001534, 0.0085437605157494545, 0.020522922277450562, 0.016522211953997612, 0.0097069237381219864, 0.010695650242269039, 0.0038095619529485703, 0.0080702658742666245, 0.0074894889257848263, 0.0093380846083164215, 0.0044117276556789875, 0.022894697263836861, 0.0042557935230433941, 0.003910550381988287, 0.011092361062765121, 0.027151813730597496, 0.0048187817446887493, 0.020721372216939926, 0.0053918077610433102, 0.0062211239710450172, 0.0046237665228545666, 0.007469437550753355, 0.0054111862555146217, 0.0079922731965780258, 0.014549629762768745, 0.0026047450955957174, 0.0077219284139573574, 0.012058697640895844, 0.010643413290381432, 0.0049316859804093838, 0.0053555015474557877, 0.0045746904797852039, 0.0060144015587866306, 0.010279102250933647, 0.017268998548388481, 0.008403499610722065, 0.0055962307378649712, 0.0097939018160104752, 0.0036494962405413389, 0.011851177550852299, 0.0056610610336065292, 0.012222477234899998, 0.013375688344240189, 0.0063061448745429516, 0.0039651826955378056, 0.0022752543445676565, 0.0053674341179430485, 0.0052215526811778545, 0.0074025224894285202, 0.0068352129310369492, 0.012398448772728443, 0.0023820044007152319, 0.005662109237164259, 0.0026225685141980648, 0.015024418942630291, 0.011429539881646633, 0.0041908295825123787, 0.011808215640485287, 0.0014098217943683267, 0.0053953006863594055, 0.0040986263193190098, 0.013083611615002155, 0.010781511664390564, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 2402, 8968, 14670, 18282, 22351, -4435, -2543, 10706, 22746, -3235, 11832, 4578, 8715, 14934, 34432, 2120, 2836, 7286, 20637, 5289, -309, 999, 18957, -1501, 5699, 43, 17497, 6703, 7273, 64046, 62747, 18944, 8139, -1194, 11776, 4010, 2746, 5516, 22600, -1108, 11956, 10349, 38651, -5712, 42032, 10748, 9072, 20943, 85188, 12504, -386, 7860, -3604, -269, -3273, 11232, -785, 16900, 7013, 13984, 7168, 14690, 9958, 7210, 9756, 15526, 4981, -9178, 8150, -2981, 4584, 15895, 25515, 6852, -4529, -5361, 7321, 427, 2667, -1605, 21729, 12489, 5334, 19574, 3657, 795, 18547, 80479, 8500, 12782, 9353, -135, 5968, 12779, 8547, 28552, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00017875000776257366, 0.0001700805441942066, 0.00012212803994771093, 0.0001181294719572179, 0.00013491566642187536, 0.00021773263870272785, 0.00032140695839188993, 0.00015065040497574955, 0.00010047325486084446, 0.0004112782480660826, 0.00022377417190000415, 0.00017737466259859502, 0.00014635738625656813, 0.00015503590111620724, 6.9270354288164526e-05, 0.00024877721443772316, 0.00017305325309280306, 0.0001736082776915282, 0.00010537559137446806, 0.00022453600831795484, 0.00023722910555079579, 0.00037674049963243306, 0.00010264937009196728, 0.0004074706812389195, 0.00045271232374943793, 0.00017827839474193752, 0.00012899113062303513, 0.0002061941777355969, 0.00022044972865842283, 5.5238811910385266e-05, 4.5779535867040977e-05, 0.00012936990242451429, 0.00020503507403191179, 0.00019848460215143859, 0.00016982243687380105, 0.00014269970415625721, 0.0001966876006918028, 0.00025397003628313541, 0.00011505847214721143, 0.00050462642684578896, 0.00015494023682549596, 0.00015510446974076331, 6.9094487116672099e-05, 0.00018804380670189857, 7.6921372965443879e-05, 0.00013782500172965229, 0.0001910613791551441, 0.00012886067270301282, 4.8497760872123763e-05, 0.000172271320479922, 0.00021232920698821545, 0.00022094103042036295, 0.00027997113647870719, 0.00020002789096906781, 0.00030392978806048632, 9.2840477009303868e-05, 0.00013747408229392022, 0.00011031031317543238, 0.00029585606534965336, 0.00010671608470147476, 0.00021637974714394659, 9.4606351922266185e-05, 0.00015171257837209851, 0.00013552716700360179, 0.00025744515005499125, 0.00012597689055837691, 0.00025674651260487735, 0.00014293516869656742, 0.0002049097529379651, 0.00024141915491782129, 0.00023345500812865794, 0.00010062848014058545, 8.0795754911378026e-05, 0.00015175314911175519, 0.00033555444679223001, 0.00025055644800886512, 0.00022873761190567166, 0.00022022877237759531, 0.00028910377295687795, 0.00024320335069205612, 9.3801121693104506e-05, 0.00013362777826841921, 0.00015217886539176106, 9.7720294434111565e-05, 0.00028537138132378459, 0.00016823633632156998, 0.00012558292655739933, 4.7206176532199606e-05, 0.00014626483607571572, 0.00017891429888550192, 0.00013797177234664559, 0.00039467454189434648, 0.0002435449423501268, 0.00012747346772812307, 0.00013697589747607708, 6.2770108343102038e-05, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 20,78,25,78,20,87,29,-50,23,14,-82,124,-4,-127,32,-115, 
  /* [1][0][][] */ 14,51,-5,-14,43,-42,127,-105,8,79,-13,-32,-2,-16,18,-1, 
  /* [2][0][][] */ -127,17,-9,-25,-3,34,30,19,-8,-8,119,-12,-53,25,34,-58, 
  /* [3][0][][] */ 8,90,39,41,-71,48,77,127,31,42,-66,-7,17,-55,-91,-24, 
  /* [4][0][][] */ 20,-23,25,92,-31,77,-4,39,46,-22,-13,28,63,3,-127,-6, 
  /* [5][0][][] */ -16,-56,48,-3,8,-32,-9,24,-77,95,-43,-127,-6,14,-43,-14, 
  /* [6][0][][] */ 8,-12,50,4,39,85,-51,-86,-15,7,37,-18,127,-9,-20,-71, 
  /* [7][0][][] */ 25,14,127,-39,-24,-44,14,-2,-89,42,-54,-88,-4,5,74,-27, 
  /* [8][0][][] */ 26,19,76,68,-5,33,-3,0,32,31,28,-65,-44,15,-127,-96, 
  /* [9][0][][] */ 41,-127,85,25,-34,22,-8,3,72,6,95,-3,-21,29,-66,-87, 
  /* [10][0][][] */ -59,-125,24,30,-98,-7,-41,36,52,127,65,-69,-10,77,68,-30, 
  /* [11][0][][] */ 20,4,-15,-101,18,-42,-97,-127,-30,75,36,-7,16,-7,97,-46, 
  /* [12][0][][] */ -28,-22,23,-33,-31,-13,-96,-19,-31,-82,8,20,30,73,127,32, 
  /* [13][0][][] */ -32,-75,-127,25,-17,-88,-5,-28,48,-6,-33,46,39,5,97,40, 
  /* [14][0][][] */ 1,-54,34,33,18,25,25,127,24,43,8,-41,13,52,-66,109, 
  /* [15][0][][] */ 33,-42,-8,73,15,-12,124,-1,22,-127,7,-27,16,-37,-25,-22, 
  /* [16][0][][] */ 42,-94,-42,26,9,-32,37,-56,109,68,103,-8,-1,89,67,127, 
  /* [17][0][][] */ -8,-60,20,127,51,44,-2,-85,87,-43,-9,-45,3,32,-72,23, 
  /* [18][0][][] */ -11,36,15,35,-83,-52,-1,-1,-81,-44,-33,-74,15,-127,36,-3, 
  /* [19][0][][] */ 61,-18,44,-74,65,-1,-87,70,59,-23,70,-28,-40,37,3,127, 
  /* [20][0][][] */ 37,-4,59,-99,-1,7,-28,49,-16,-27,82,2,-8,10,-73,127, 
  /* [21][0][][] */ -19,-27,-49,-4,-11,20,-125,-59,-34,45,-28,41,-127,29,53,18, 
  /* [22][0][][] */ 31,-26,22,-22,28,-100,-7,-48,-127,24,-20,-43,-23,-20,87,-46, 
  /* [23][0][][] */ 26,5,27,-11,-14,20,-5,-6,-11,10,29,-18,127,1,2,-34, 
  /* [24][0][][] */ -13,6,29,-66,-19,-16,63,11,-31,-1,-11,-127,24,-64,34,20, 
  /* [25][0][][] */ -121,7,-24,-11,40,0,-97,-127,-6,125,-106,-30,-59,-9,-18,-46, 
  /* [26][0][][] */ 21,-21,-4,-75,104,-47,8,8,112,-44,70,-34,-26,127,38,56, 
  /* [27][0][][] */ 84,-30,29,-40,-22,-43,1,-12,-31,30,-127,11,8,-20,6,40, 
  /* [28][0][][] */ -87,-41,-127,-68,76,-45,56,-19,-1,19,-88,33,78,-4,-17,52, 
  /* [29][0][][] */ -108,7,17,127,-8,-29,13,-47,-57,-1,-63,44,-48,-98,18,-88, 
  /* [30][0][][] */ 81,1,127,-28,64,39,-34,84,-50,-58,44,-43,-16,16,-95,63, 
  /* [31][0][][] */ -8,-69,4,-57,6,-42,-3,-60,-18,27,127,24,-40,81,86,120, 
  /* [32][0][][] */ -9,57,-40,39,-127,12,-69,-35,-47,-24,-5,44,17,41,29,65, 
  /* [33][0][][] */ 10,-23,50,125,64,7,25,-51,-127,59,89,-15,-20,21,-9,113, 
  /* [34][0][][] */ 25,-4,26,-20,79,-28,-127,5,-51,89,-66,3,-38,-10,14,18, 
  /* [35][0][][] */ 108,9,-30,21,-9,-127,-38,-31,-55,-12,-107,-19,121,15,44,-7, 
  /* [36][0][][] */ 31,-3,-127,5,42,16,-27,23,-25,-14,-4,10,-3,13,-15,21, 
  /* [37][0][][] */ 8,-37,127,14,-52,59,21,-44,3,0,-70,86,32,11,-19,-5, 
  /* [38][0][][] */ -86,29,40,10,27,127,10,-17,-8,-46,94,-40,-29,-5,15,-34, 
  /* [39][0][][] */ -13,11,22,30,45,-1,-127,37,-1,21,6,-20,-13,-21,-19,-14, 
  /* [40][0][][] */ 2,46,16,127,17,74,40,-2,-34,-26,-41,52,14,14,-39,-27, 
  /* [41][0][][] */ 34,17,-52,-25,-88,16,127,122,-75,68,-42,-17,1,52,49,3, 
  /* [42][0][][] */ 26,-15,-4,-35,39,-6,-27,66,37,-63,127,57,8,27,-62,41, 
  /* [43][0][][] */ -57,14,46,-33,48,-12,-64,-66,-24,34,27,-16,-127,-14,3,0, 
  /* [44][0][][] */ -4,-13,3,-30,-4,-5,-13,-23,127,-21,30,57,-8,84,-7,67, 
  /* [45][0][][] */ -71,-61,3,-127,67,-5,-46,62,2,-38,5,-43,15,100,14,123, 
  /* [46][0][][] */ -65,24,-26,100,-88,-18,0,-77,-127,33,-55,-2,0,35,8,-45, 
  /* [47][0][][] */ -24,-2,-91,127,-3,39,-11,-35,3,61,52,95,-40,1,34,-24, 
  /* [48][0][][] */ -34,-16,33,-127,0,-3,-40,3,-63,-13,35,-80,-6,17,76,15, 
  /* [49][0][][] */ -42,-15,63,127,2,79,-76,-43,29,-102,-92,-4,6,8,-28,-120, 
  /* [50][0][][] */ 19,64,27,-95,44,6,-12,51,127,-11,-53,9,16,-23,6,-49, 
  /* [51][0][][] */ 8,4,12,-13,13,-23,-69,-127,2,-44,11,6,-7,-19,5,-11, 
  /* [52][0][][] */ 1,10,13,42,56,13,-66,74,-84,127,-17,-53,49,113,0,-68, 
  /* [53][0][][] */ 3,110,-64,-109,-45,-11,44,17,-63,-69,-77,115,42,-127,-60,14, 
  /* [54][0][][] */ -22,9,30,38,69,-31,17,-47,-22,46,6,-27,-25,127,-48,-28, 
  /* [55][0][][] */ -127,99,100,-1,44,10,-32,-31,-43,28,99,4,-39,-18,87,-55, 
  /* [56][0][][] */ 76,13,48,-92,102,11,-15,40,73,-72,13,127,-18,32,51,52, 
  /* [57][0][][] */ -28,35,20,87,-54,40,51,127,-45,64,-6,-92,-36,45,-52,16, 
  /* [58][0][][] */ -5,127,7,-116,11,30,-26,7,76,3,4,71,-3,-60,12,37, 
  /* [59][0][][] */ 44,75,103,-121,-48,-11,-3,-39,2,26,29,-61,-27,-127,-88,-18, 
  /* [60][0][][] */ 18,17,127,-21,-10,117,25,-45,-19,28,-68,-15,-4,-4,-10,7, 
  /* [61][0][][] */ 31,30,-49,-18,-60,-1,102,127,-36,86,-6,-27,28,76,-8,-60, 
  /* [62][0][][] */ -22,9,-29,-4,-35,-17,-21,33,-22,17,-1,-53,-26,-127,69,-4, 
  /* [63][0][][] */ -23,-49,-52,-121,73,-14,-127,-115,-59,95,-4,42,61,-2,113,-26, 
  /* [64][0][][] */ -23,-12,25,53,52,7,-19,-127,5,-124,5,-75,-2,-26,-11,2, 
  /* [65][0][][] */ -127,38,41,-55,5,107,46,-79,-81,32,67,0,-5,32,-32,-25, 
  /* [66][0][][] */ 48,20,68,-9,-66,11,14,52,-19,21,82,-80,17,25,-127,41, 
  /* [67][0][][] */ 46,-37,-108,114,47,-91,-21,-92,103,-127,-66,-21,-82,48,-70,51, 
  /* [68][0][][] */ -8,-26,-76,24,-21,-79,18,-18,-2,-38,81,17,-53,38,127,38, 
  /* [69][0][][] */ -15,9,-29,31,-20,-127,12,97,26,-12,62,14,111,35,28,27, 
  /* [70][0][][] */ -2,4,-16,-6,-32,27,127,102,-36,49,-14,-18,36,38,12,-25, 
  /* [71][0][][] */ 10,-40,-39,-50,29,10,-4,96,-31,-71,-14,-11,47,-127,61,10, 
  /* [72][0][][] */ 8,41,12,59,29,-43,-48,-127,11,37,-50,20,65,41,48,8, 
  /* [73][0][][] */ -48,-127,-36,-53,-74,0,48,-49,-8,6,-13,-16,22,-41,84,-29, 
  /* [74][0][][] */ -20,32,61,96,-7,24,-127,98,8,-11,-32,-48,-2,-17,6,-1, 
  /* [75][0][][] */ -71,25,-73,24,-36,112,111,127,13,59,7,-30,-114,74,19,37, 
  /* [76][0][][] */ 5,10,1,-45,31,-68,-127,-71,-42,-16,22,-49,2,-17,37,-23, 
  /* [77][0][][] */ -48,20,-43,-37,-63,-22,-22,-62,127,20,-57,3,-19,37,50,-108, 
  /* [78][0][][] */ -127,-91,34,102,88,112,-8,52,-21,-59,-60,13,5,-27,61,22, 
  /* [79][0][][] */ 38,3,40,-88,127,6,60,18,78,28,3,21,1,-36,0,-40, 
  /* [80][0][][] */ -14,-8,40,-127,-3,-26,15,20,-45,-38,-23,-19,-24,127,-46,61, 
  /* [81][0][][] */ 22,15,63,27,2,56,-5,8,-3,-2,30,-69,-20,21,-127,-11, 
  /* [82][0][][] */ -74,-14,-62,-89,-26,-88,-45,-99,46,-88,-97,-84,-92,-127,-123,76, 
  /* [83][0][][] */ 5,23,-4,-57,-55,-2,-13,47,-95,9,12,-87,6,-127,-40,28, 
  /* [84][0][][] */ 100,31,18,43,-45,25,-70,17,-3,-27,127,-3,-65,12,73,-79, 
  /* [85][0][][] */ -17,-33,15,-15,55,-16,-52,111,-88,-89,-58,-27,-34,69,96,-127, 
  /* [86][0][][] */ 76,38,54,2,-107,71,-38,93,-127,-67,9,-33,-3,-114,-102,-1, 
  /* [87][0][][] */ 127,-25,7,-15,-25,-31,14,13,16,6,-96,17,28,-11,-5,46, 
  /* [88][0][][] */ 0,40,2,47,94,-28,34,-20,62,-5,104,-11,-25,-4,117,-127, 
  /* [89][0][][] */ 43,78,-48,-8,-8,-9,58,-75,20,65,16,-46,-55,-12,-25,-127, 
  /* [90][0][][] */ 14,-4,23,-94,-57,28,127,-55,112,-95,40,-93,45,-3,-82,-3, 
  /* [91][0][][] */ 16,-7,-43,-71,-64,-8,14,-54,-61,21,53,34,29,-36,56,127, 
  /* [92][0][][] */ 26,6,0,16,50,-8,-70,-127,31,-64,12,-55,-33,-35,16,-13, 
  /* [93][0][][] */ 113,-4,83,-127,-53,-15,-28,55,16,-111,72,-36,-16,118,-75,49, 
  /* [94][0][][] */ -104,68,-95,43,82,-127,-32,-39,18,-39,88,-16,-13,13,-31,1, 
  /* [95][0][][] */ -40,85,63,-119,14,-46,-28,-37,20,-44,-104,-113,32,81,-127,-88, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00071173132164403796, 0.00067721196683123708, 0.00048627884825691581, 0.00047035768511705101, 0.00053719553397968411, 0.00086694897618144751, 0.0012797503732144833, 0.00059984670951962471, 0.00040005569462664425, 0.0016375920968130231, 0.00089100463083013892, 0.00070625508669763803, 0.0005827531567774713, 0.00061730854213237762, 0.00027581470203585923, 0.00099055957980453968, 0.00068904843647032976, 0.00069125840673223138, 0.00041957540088333189, 0.00089403800666332245, 0.00094457832165062428, 0.0015000726561993361, 0.00040872037061490119, 0.0016224314458668232, 0.0018025706522166729, 0.00070985348429530859, 0.00051360571524128318, 0.00082100613508373499, 0.0008777676266618073, 0.00021994511189404875, 0.00018228098633699119, 0.00051511387573555112, 0.00081639090785756707, 0.0007903088117018342, 0.0006761842523701489, 0.00056818930897861719, 0.00078315363498404622, 0.0010112358722835779, 0.00045812985626980662, 0.0020092776976525784, 0.00061692763119935989, 0.00061758153606206179, 0.00027511443477123976, 0.0007487365510314703, 0.00030627884552814066, 0.00054877967340871692, 0.00076075165998190641, 0.0005130862700752914, 0.00019310417701490223, 0.00068593502510339022, 0.00084543402772396803, 0.00087972386972978711, 0.0011147648328915238, 0.00079645373625680804, 0.0012101612519472837, 0.00036966416519135237, 0.00054738239850848913, 0.00043922403710894287, 0.0011780140921473503, 0.00042491286876611412, 0.00086156214820221066, 0.00037669538869522512, 0.00060407601995393634, 0.00053963030222803354, 0.0010250727646052837, 0.00050160387763753533, 0.0010222910204902291, 0.00056912685977295041, 0.00081589189358055592, 0.00096126185962930322, 0.00092955090804025531, 0.00040067377267405391, 0.00032170553458854556, 0.00060423754621297121, 0.0013360816519707441, 0.00099764391779899597, 0.00091076758690178394, 0.00087688781786710024, 0.0011511283228173852, 0.000968366046436131, 0.00037348916521295905, 0.00053206749726086855, 0.00060593261150643229, 0.00038909420254640281, 0.0011362670920789242, 0.00066986889578402042, 0.0005000352393835783, 0.00018796145741362125, 0.00058238464407622814, 0.00071238545933738351, 0.00054936402011662722, 0.0015714808832854033, 0.00096972612664103508, 0.00050756282871589065, 0.00054539873963221908, 0.00024993257829919457, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -1505, 11962, -1442, 31336, 28152, 10209, -7482, -6489, 8371, 8379, 18464, 14754, -8187, 6134, 30754, -45393, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00043944042408838868, 0.0003228113055229187, 0.00027923390734940767, 0.00021848830510862172, 0.00033133148099295795, 0.00043372047366574407, 0.00031669720192439854, 0.00041248224442824721, 0.00020908161241095513, 0.0002975576207973063, 0.00040042010368779302, 0.00064058677526190877, 0.00038791514816693962, 0.0004441853379830718, 0.0005462676053866744, 0.00033540910226292908, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -9,14,-26,7,42,79,-46,-37,40,12,18,7,-21,20,26,69,0,-20,-8,-15,92,-67,-14,-18,-23,-34,-47,-95,1,-2,51,29,116,0,4,4,3,-23,-18,14,-23,13,-1,-37,0,-31,-11,33,-8,18,-5,-5,-23,3,-1,-13,43,47,-13,-37,-71,31,-22,-12,19,6,57,-9,5,2,9,-33,-70,-14,12,15,-4,-97,1,-18,40,-16,-62,-35,36,-6,10,24,-22,-17,29,-19,17,32,-1,127, 
  /* [1][0][][] */ 51,-108,21,67,-37,-79,-31,-54,-28,-90,4,-15,-15,-76,-41,-36,-109,-19,12,14,-41,-127,-48,13,120,-67,-62,32,-8,98,-2,20,-5,10,-47,29,-1,6,71,-31,-11,-82,35,-45,-63,10,47,-11,40,36,12,-46,76,-72,15,-43,22,23,-12,-109,2,-51,15,-95,-33,-85,37,26,31,52,-46,-14,-112,22,5,79,10,81,9,0,28,-5,-71,5,-91,74,-18,46,-44,17,23,21,8,-46,49,-16, 
  /* [2][0][][] */ 31,13,8,-31,10,-26,-13,52,71,-5,11,62,-32,21,55,0,-41,-31,32,1,-37,-61,20,-36,-16,-4,-13,39,2,16,109,-65,16,-74,-22,44,4,127,-24,-5,8,7,-7,38,-25,-53,-56,25,28,21,-5,-29,42,3,7,-25,-32,-6,-6,29,-9,25,58,93,14,-93,33,-75,1,-10,1,-5,-38,13,-11,18,16,58,18,57,12,96,40,-6,-4,11,-11,10,29,15,-6,-75,-50,-5,-21,46, 
  /* [3][0][][] */ -25,-31,-67,28,8,-6,-9,-28,-2,29,-4,-27,1,-9,50,-11,49,-39,15,-12,-10,-28,-46,1,-2,-4,6,-13,40,-60,59,-39,-13,-27,-35,52,-5,-12,-6,12,10,-78,-7,-38,3,0,-15,6,-127,51,-19,18,-111,-46,-33,-41,44,29,-18,39,-22,7,9,3,-24,-86,-27,18,60,14,-7,23,-33,12,-1,-35,-22,-72,34,-27,0,-15,28,79,51,47,21,-14,15,-12,-3,27,-34,16,-21,-15, 
  /* [4][0][][] */ -1,-22,18,-86,-24,-14,-54,4,-13,-59,-31,-15,8,68,11,36,47,15,4,-33,-35,51,54,2,-14,9,28,28,21,2,1,-9,-24,15,-13,9,66,-27,-2,-5,8,-24,-105,-35,29,-11,-14,-24,1,107,1,-17,-36,-13,1,2,-10,-24,35,45,34,24,18,-17,30,-113,18,-22,-57,24,-22,-7,6,23,-23,24,-17,86,58,-12,25,-5,127,-46,34,-41,-32,2,82,24,-20,45,-30,42,-16,-50, 
  /* [5][0][][] */ -8,1,-22,5,-8,-33,-1,98,42,-1,-31,-23,-31,24,42,10,-21,-20,11,-24,-23,-20,3,-25,8,0,11,52,52,11,39,35,-48,11,1,-18,-57,-40,-21,0,-33,-16,-13,-3,49,10,3,7,16,-3,5,1,-16,-14,4,-9,-15,-31,-21,38,-65,13,-24,-29,19,16,-8,-5,12,10,-3,2,17,14,12,-7,-11,5,25,124,-12,-37,32,30,10,12,0,-30,-4,-16,11,-127,-39,-4,-18,-106, 
  /* [6][0][][] */ -24,-2,-19,-57,-6,-10,-11,-1,-2,25,-25,-23,37,-64,11,-16,12,-54,15,-5,23,-4,-32,17,87,-22,1,-16,13,-14,-10,-11,-27,-1,-29,-1,13,11,17,32,-13,-36,-54,-26,9,-20,35,-127,16,24,11,9,16,-5,0,-66,43,1,-9,9,10,3,9,11,44,69,28,-23,-15,-14,1,-19,24,10,68,-16,-22,15,6,24,-30,-6,50,-44,7,53,14,-42,11,0,-29,-4,-28,25,-3,25, 
  /* [7][0][][] */ 20,16,20,-30,-6,19,-11,-23,10,-21,-17,-6,-21,-84,29,23,7,-20,0,-11,16,-36,-24,-4,-17,-2,2,-24,2,24,15,9,-22,-6,-5,-13,-8,-14,-31,8,6,-17,-21,18,-6,20,-10,65,1,21,-38,-19,-23,11,-5,-66,53,-10,-2,-12,-11,9,-26,0,-13,54,18,-18,-12,-8,0,32,-12,3,-6,-5,44,1,-1,-6,15,-28,31,8,-47,127,3,8,-46,-32,-1,15,-32,3,-4,8, 
  /* [8][0][][] */ -74,48,-32,22,72,-10,-9,57,26,79,-20,33,48,37,68,-23,-2,53,-91,45,47,36,-19,8,-41,-6,23,1,27,-69,-13,10,48,-6,23,-7,-14,58,-34,47,31,11,25,-127,-46,-3,54,-8,-45,23,-8,84,-118,92,24,-6,-4,-19,-16,-10,7,-60,-11,37,-23,45,44,-23,-10,6,46,74,-11,34,37,17,2,-88,7,-49,-19,-10,18,4,-55,1,31,-54,30,37,-40,-14,48,-12,-21,-2, 
  /* [9][0][][] */ 24,-58,-15,-30,12,18,-9,26,25,-30,18,4,-29,-38,-8,38,-10,19,42,-3,-40,12,-7,-44,18,16,29,-1,-24,-29,-14,-2,3,13,20,32,17,50,-14,24,16,22,9,-79,14,-7,18,-127,-24,10,-1,39,-6,-9,-22,5,-45,14,-28,6,43,18,1,19,6,81,23,50,-4,-9,11,-30,-13,6,-40,2,37,10,11,3,-8,3,4,-55,-6,19,-8,6,-18,45,-38,1,19,-11,2,-42, 
  /* [10][0][][] */ 31,30,1,33,88,-126,-4,-2,35,33,65,27,-16,27,-15,-79,13,55,1,49,-90,-11,5,-28,-79,12,-52,80,14,19,35,56,-19,-18,30,-23,76,-35,-21,-3,7,70,54,-35,-63,-35,-31,14,-14,-36,-41,-1,-25,-8,11,-3,-4,34,-1,-10,18,12,-32,23,13,55,57,32,30,-18,35,44,-44,-19,-44,-14,3,35,-25,13,43,6,-65,-37,41,-37,127,1,-33,35,16,-16,105,40,-10,-116, 
  /* [11][0][][] */ 44,42,-19,33,4,26,56,18,-6,-16,-17,-16,13,0,42,-6,2,5,-100,5,16,29,12,2,-36,-21,-4,-11,-9,24,-13,1,7,12,5,15,5,6,-16,15,8,13,76,-84,27,-24,6,6,-127,13,0,-43,16,26,-4,4,-16,-23,5,5,18,-27,-4,12,-43,57,-11,16,17,2,14,9,-42,-20,-5,13,6,-24,-46,1,11,3,73,32,12,-20,-6,-22,8,24,-18,-16,8,0,-24,21, 
  /* [12][0][][] */ -42,-6,-21,-15,-38,59,12,-23,127,31,-36,14,-4,25,-7,-67,46,11,9,49,95,40,-33,-8,5,-12,18,-66,-116,15,16,-75,-8,4,-9,-8,9,-6,49,-12,-64,-29,-10,17,-8,40,-4,-16,10,15,-45,8,9,-14,17,-11,87,-31,14,2,-16,-22,4,-17,5,41,-48,0,-7,6,-41,-39,27,17,-96,25,60,-27,18,-71,-22,-3,41,65,-10,-17,-53,-24,2,-1,5,49,-35,-16,20,14, 
  /* [13][0][][] */ 35,-14,-11,25,43,1,25,8,6,6,14,11,24,-5,3,-8,21,-64,-30,23,-28,-16,13,6,-4,17,11,9,-18,-34,15,28,3,10,15,37,27,-10,10,21,9,17,25,40,17,12,-12,-127,34,-17,-6,4,-22,15,18,1,-10,22,35,17,14,23,0,7,-5,-14,-24,-53,18,4,3,-19,-13,45,-3,14,-32,6,27,-16,38,-5,-14,18,5,33,17,23,-9,-7,29,-3,9,25,-4,-1, 
  /* [14][0][][] */ -105,-44,54,28,36,-32,-32,18,-19,-2,11,21,73,-4,-127,-7,74,-9,-13,38,-32,8,32,12,-109,7,16,-6,-41,-66,-20,11,-5,19,27,-65,32,18,-22,24,21,45,1,-5,8,107,59,58,-87,44,11,24,-55,-12,30,15,-15,18,45,51,40,39,22,59,14,-33,-43,41,0,57,-42,-78,-58,-6,-14,37,-15,47,84,-4,45,16,7,8,31,13,52,28,50,38,48,3,12,17,11,-13, 
  /* [15][0][][] */ 119,-17,69,8,1,95,68,-2,-8,54,7,1,-72,-9,-17,58,27,69,74,9,-11,56,-95,84,23,13,62,-15,8,67,-69,-50,30,-55,64,-7,35,-44,-82,-127,-10,42,34,21,14,72,-19,-24,125,-65,-86,17,33,-111,85,-127,-2,-117,29,29,-120,8,26,46,88,-24,-78,67,-37,102,-24,36,61,38,0,-30,27,-46,65,-32,0,0,16,100,-34,-21,15,-32,0,-35,89,-13,-78,59,32,6, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.018676217645406723, 0.013719480484724045, 0.011867440305650234, 0.0092857526615262032, 0.014081588014960289, 0.018433120101690292, 0.013459631241858006, 0.017530495300889015, 0.0088859684765338898, 0.012646198272705078, 0.017017854377627373, 0.027224937453866005, 0.016486393287777901, 0.018877876922488213, 0.023216372355818748, 0.014254886656999588, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10288, -10683, 1758, 55302, -1066, -3591, -11418, 6209, -3238, 2201, 3413, 187, 1361, -16601, 6505, -6083, -1195, 16748, 23359, 3236, 2233, -2460, -203, -1197, 18120, -4070, -550, -1652, -6156, -7696, 9188, -10243, -622, -1219, -155, 19038, 2067, -3106, 18417, 1301, 730, 2492, -9725, -7684, -8709, 58912, 347, 17662, 41880, -12866, 19, 9636, 9546, -952, -9015, 2959, -14970, 2925, 2489, -5929, -57, -796, -13065, 773, 1360, 15747, 28401, 27188, -13180, 427, -12825, -1062, 35478, 7225, 1270, 1159, 18059, 28635, 1385, -10740, -1051, -7314, 807, -2874, -85, 2452, 2246, 1674, 2856, -1301, 414, -99, 750, 2096, 894, 52332, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00015589738904964179, 7.9990735684987158e-05, 0.00028403542819432914, 3.7257661460898817e-05, 0.00012715118646156043, 0.00017389687127433717, 0.00028417920111678541, 6.9700567109975964e-05, 0.00013154027692507952, 0.0003159566258545965, 0.00015102054749149829, 0.00038741380558349192, 6.7088745709042996e-05, 0.00027561295428313315, 0.00015630514826625586, 0.00013602279068436474, 8.5107356426306069e-05, 0.0003031089436262846, 7.2554219514131546e-05, 0.00018945665215142071, 5.6300817959709093e-05, 0.00014626714983023703, 0.00010765036131488159, 0.00035460584331303835, 0.00017241833847947419, 0.00019654937204904854, 0.00012337321822997183, 0.00018297867791261524, 0.00011293829447822645, 9.8479715234134346e-05, 0.00013112193846609443, 0.00015952061221469194, 0.00010224879224551842, 0.00011507953604450449, 0.00020236294949427247, 0.0001260312128579244, 0.00031143843079917133, 0.00010193939669989049, 5.2627507102442905e-05, 0.00011915112554561347, 0.00023654283722862601, 0.00027457167743705213, 0.00036976207047700882, 0.00017119963013101369, 0.00018796436779666692, 4.8601887101540342e-05, 0.00016081605281215161, 0.00018680880020838231, 6.5915279265027493e-05, 0.00017437255883123726, 0.0001486634137108922, 0.00011572366929613054, 0.00023850948491599411, 0.00021059342543594539, 0.0001678845874266699, 0.00034703759592957795, 0.00025201047537848353, 0.00021234620362520218, 8.4904131654184312e-05, 8.1284786574542522e-05, 0.00025048325187526643, 0.00012847030302509665, 0.00024013289657887071, 0.00011168722994625568, 0.0001576801878400147, 0.00016889243852347136, 8.8055006926879287e-05, 6.6279142629355192e-05, 0.00030449492624029517, 0.00023633950331714004, 0.00013873660645913333, 0.00010005687363445759, 0.00016544020036235452, 0.00013413259875960648, 0.0001598385424586013, 0.00020546412270050496, 0.0005523902946151793, 4.3448137148516253e-05, 0.00018878743867389858, 0.00017180743452627212, 0.00013289776688907295, 0.0002835660707205534, 0.00013535718608181924, 0.00012764021812472492, 0.00010273823863826692, 9.8711389000527561e-05, 0.00011448559234850109, 0.00021387345623224974, 0.00015493118553422391, 0.00012656992475967854, 0.00018261303193867207, 0.0001146402137237601, 0.00011489631287986413, 0.0003532729169819504, 0.001433498808182776, 6.6790584241971374e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,5,-19,109,-18,25,-66,-55,16,-7,103,-10,5,-9,-5,56,5,17,-29,3,80,0,32,-34,2,17,42,46,21,12,21,49,-6,25,9,-16,4,49,-69,-26,18,8,25,19,-88,-55,25,-5,-11,-22,-8,-6,47,4,-10,2,2,-34,24,-33,27,-2,127,26,-12,-13,11,-51,68,34,-1,-9,82,-32,68,0,17,-126,28,69,-1,15,127,-14,39,30,-29,-18,39,-8,-16,85,-1,18,-2,12, -49,12,-6,10,52,-6,-13,-127,39,12,-127,-5,-15,-13,3,97,19,-29,-12,-16,81,-99,127,26,-60,-30,-104,-17,29,34,-51,19,122,10,-11,-2,-23,127,-73,-127,7,-21,-32,14,45,-127,127,-45,-76,48,49,6,37,-63,30,57,43,43,-103,84,127,35,4,-22,43,-39,-104,1,39,-32,-20,43,-44,-52,103,-6,-30,-61,-35,64,-71,67,-17,7,-9,48,57,-42,-25,53,-14,78,-127,-32,23,-127, -1,-5,-22,-78,8,20,36,17,-3,-2,6,62,0,-12,-15,2,-13,18,-11,16,12,22,23,-34,2,-33,10,13,-7,3,44,-78,42,17,14,-24,13,5,-39,-21,6,4,-19,9,21,-30,21,0,6,-9,5,-5,5,4,-5,8,-2,47,1,-3,11,-14,3,-20,-27,-19,30,-49,-106,-8,38,-19,-127,-25,-10,14,11,-11,6,12,-19,27,-38,-4,-41,20,28,36,-24,-17,23,-7,15,5,-1,-46, 
  /* [0][1][][] */ -42,59,-17,43,-87,-15,-11,-46,26,95,-48,-22,-30,-25,-7,68,127,-25,-94,-13,60,-127,-30,15,-35,-46,-127,-8,38,38,-51,28,-127,-75,-57,3,66,-3,-58,46,-21,87,0,-5,34,-50,-12,-32,127,44,-4,20,45,10,-38,-17,37,8,-127,127,-38,-86,23,127,-60,-35,-90,126,-36,127,-22,52,-35,-57,36,5,-34,-70,127,50,127,38,4,-1,127,28,-98,48,-36,-37,-106,41,94,101,29,-57, 127,127,127,127,-46,-127,127,20,127,-127,19,-127,-107,127,127,127,-15,-127,-59,-127,127,24,-70,127,127,127,-52,-127,127,127,-127,127,-8,-127,-123,127,-127,-45,94,107,-127,-127,127,127,127,-120,-107,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-41,40,-115,-26,-66,-70,127,127,-69,127,127,-106,-127,127,-42,127,-127,-127,-127,127,-80,127,-46,127,81,127,-39,-127,-27,-110,-127,-127,-23,-127,-22,-127,-127,119, -24,65,-37,3,127,70,-22,42,7,23,-14,-5,-28,-31,-16,-4,-105,-20,-127,35,30,76,-14,-119,-32,-42,127,70,10,36,70,9,125,-48,127,-2,56,6,-103,14,33,25,-21,-1,-23,-54,-12,-43,82,17,-10,38,-4,-4,-75,-14,29,19,125,-94,1,127,1,-38,-114,-27,-84,101,14,-17,106,24,-17,-58,12,44,-28,-8,-44,-1,-51,8,41,20,-92,33,127,-47,31,-24,127,-5,-114,34,34,20, 
  /* [0][2][][] */ -6,-42,-20,-60,-7,15,39,28,-1,10,-26,51,26,-33,-9,6,41,1,9,24,-13,31,-17,-27,1,-24,9,4,-10,-6,49,-74,-40,67,-30,-26,32,-34,-68,14,7,10,-34,17,13,-72,-12,-2,-8,11,17,-7,7,0,-22,5,2,44,-49,31,-5,-13,5,17,-9,-9,23,-51,-56,12,-24,-11,-118,-35,-1,16,14,-9,60,23,22,22,-46,14,12,24,-23,10,3,25,23,-3,20,39,-9,-30, -29,-12,-27,26,-48,72,-24,59,6,-7,55,-12,127,-6,-20,-20,-2,-44,-60,25,-27,79,-47,-114,-48,-47,104,71,12,42,49,-1,-123,62,-11,-23,-29,-25,-127,-6,42,-12,-14,36,-25,-44,-19,-48,-60,31,69,26,-11,-81,31,50,22,24,77,-59,21,-55,-8,-1,17,-25,-127,-56,-12,-26,-62,23,38,-52,-32,-8,-45,27,-58,6,49,30,17,10,6,59,-96,127,13,125,-30,-16,111,-23,48,84, -10,-36,-25,31,8,66,-43,10,5,-6,-2,13,15,-53,-14,-13,-49,-7,14,22,-23,6,-26,3,-5,17,1,53,-4,-7,31,29,17,41,23,-23,-6,-24,-35,6,8,-11,23,10,-72,-30,-14,4,-1,-14,0,-4,-9,8,-16,-5,6,-52,14,-34,-21,48,11,-29,-13,-2,34,-52,44,7,51,-20,31,-58,-18,20,11,12,-6,24,-32,31,81,-16,-17,54,37,-8,111,10,3,-14,9,-22,-7,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.00662563880905509, 0.0033996063284575939, 0.012071505188941956, 0.0015834505902603269, 0.0054039251990616322, 0.0073906169272959232, 0.012077615596354008, 0.0029622740112245083, 0.0055904616601765156, 0.013428156264126301, 0.0064183734357357025, 0.016465086489915848, 0.0028512715362012386, 0.011713550426065922, 0.0066429683938622475, 0.0057809683494269848, 0.0036170626990497112, 0.012882130220532417, 0.0030835543293505907, 0.0080519076436758041, 0.0023927846923470497, 0.0062163537368178368, 0.0045751403085887432, 0.015070747584104538, 0.007327779196202755, 0.0083533478900790215, 0.0052433619275689125, 0.0077765937894582748, 0.004799877293407917, 0.0041853878647089005, 0.0055726822465658188, 0.0067796260118484497, 0.0043455734848976135, 0.0048908800818026066, 0.0086004249751567841, 0.0053563262335956097, 0.013236132450401783, 0.0043324241414666176, 0.0022366689518094063, 0.0050639226101338863, 0.010053070262074471, 0.011669295839965343, 0.015714887529611588, 0.0072759841568768024, 0.0079884855076670647, 0.0020655801054090261, 0.0068346820771694183, 0.0079393740743398666, 0.0028013994451612234, 0.0074108336120843887, 0.0063181952573359013, 0.0049182558432221413, 0.010136652737855911, 0.0089502204209566116, 0.0071350946091115475, 0.014749097637832165, 0.010710445232689381, 0.0090247131884098053, 0.0036084256134927273, 0.0034546034876257181, 0.010645538568496704, 0.0054599875584244728, 0.01020564790815115, 0.0047467071563005447, 0.0067014079540967941, 0.0071779284626245499, 0.0037423376925289631, 0.0028168633580207825, 0.012941033579409122, 0.010044428519904613, 0.0058963056653738022, 0.0042524170130491257, 0.0070312083698809147, 0.0057006352581083775, 0.0067931381054222584, 0.008732224814593792, 0.023476587608456612, 0.0018465457251295447, 0.008023465983569622, 0.0073018157854676247, 0.0056481552310287952, 0.012051557190716267, 0.0057526803575456142, 0.0054247090592980385, 0.0043663750402629375, 0.0041952338069677353, 0.0048656375147402287, 0.0090896217152476311, 0.0065845753997564316, 0.0053792218677699566, 0.007761053740978241, 0.0048722089268267155, 0.0048830932937562466, 0.015014098957180977, 0.060923699289560318, 0.0028385997284203768, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 24943, 1850, 14177, -825, 9209, 7693, 26135, 12541, -1527, 23060, 9288, 3823, 11320, 39434, -276, -2588, 12826, 11527, 2876, -248, -1039, 12352, 5798, 4186, 9463, 6977, 7854, 7087, 136, -92, 10052, 19854, 18615, 2972, 10313, -678, 20858, 17173, 1006, 5238, 1618, 13398, 17076, 7989, 6199, 12306, 21502, 8407, 7344, 4104, 256, -1037, 21523, 13108, 12543, 21422, -367, 15047, 4874, 6521, 14923, 5227, 4219, 17411, 7445, 6189, 5608, -1075, 28790, 10905, 21615, -2163, -1995, 4949, 1652, 5828, 27989, 19605, 18217, -3730, 7621, -9295, -2221, 731, 7745, 7362, 12526, 10502, 11393, 6043, 17111, 4050, 9800, 37640, -10694, 20347, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00010604938142932951, 0.00017538850079290569, 9.3375812866725028e-05, 0.00067622255301102996, 0.00016975389735307544, 0.00012507771316450089, 0.00012116867583245039, 0.00028550231945700943, 0.00026739601162262261, 7.7599092037416995e-05, 0.00015308655565604568, 0.00022177177015691996, 0.00024614171707071364, 0.00012336634972598404, 0.00017088741878978908, 0.00027858384419232607, 0.00017087538435589522, 0.00020217514247633517, 0.00016350411169696599, 0.0004904302186332643, 0.00026377165340818465, 0.00020033500913996249, 0.00026267883367836475, 0.00018531634123064578, 0.00018615918816067278, 0.00030091870576143265, 0.00017429693252779543, 0.00013175077037885785, 0.00041461552609689534, 0.00029323381022550166, 0.00015362456906586885, 9.3795992142986506e-05, 0.00010512554581509903, 0.00035715903504751623, 0.00016235186194535345, 0.00049685279373079538, 0.00010748006752692163, 0.00015257811173796654, 0.00048803343088366091, 0.00017795014719013125, 0.0003155395679641515, 0.00014143149019218981, 0.00012695079203695059, 9.8339849500916898e-05, 0.00018067997007165104, 0.00026262248866260052, 0.00013390685489866883, 0.00017434245091862977, 0.0002176961861550808, 0.00021841080160811543, 0.00042574672261252999, 0.00067239016061648726, 0.0001241380232386291, 0.00012566572695504874, 0.00018740972154773772, 8.6249303421936929e-05, 0.00027719285571947694, 0.00011512065975693986, 0.00016413780394941568, 0.00025085327797569335, 0.00010930941789411008, 0.00026116505614481866, 0.00025078552425839007, 0.00015871379582677037, 0.0001312953099841252, 0.00018558901501819491, 0.00034128210972994566, 0.00034801560104824603, 9.3531845777761191e-05, 0.00010485527309356257, 9.3738119176123291e-05, 0.00023487635189667344, 0.00020381731155794114, 0.00026915030321106315, 0.00026702310424298048, 0.0002190849045291543, 8.422647078987211e-05, 0.00022546805848833174, 9.0252804511692375e-05, 0.00032993080094456673, 0.00015214293671306223, 0.00022278189135249704, 0.00016771254013292491, 0.00040117138996720314, 0.00020909399609081447, 0.00021687238768208772, 0.00013006066728848964, 0.00013459377805702388, 0.0001464500674046576, 0.00027111696545034647, 8.3899438322987407e-05, 0.00040838250424712896, 0.00021183057106100023, 7.3541777965147048e-05, 0.00027354990015737712, 0.00016187150322366506, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 55,-15,93,118,69,-16,31,-64,127,10,-88,-117,119,80,-37,-69, 
  /* [1][0][][] */ 55,107,-10,-3,99,32,7,14,88,84,-69,127,15,-14,113,-79, 
  /* [2][0][][] */ 35,-33,12,23,-4,72,-59,94,-78,-108,-19,123,14,-127,89,-117, 
  /* [3][0][][] */ 115,87,-32,57,-127,-22,-65,-24,7,-3,113,-44,-43,78,-45,-42, 
  /* [4][0][][] */ 63,-15,55,20,-50,53,-15,46,-64,-50,-27,16,5,-127,-17,-17, 
  /* [5][0][][] */ 100,-30,-6,16,-3,-78,2,10,-13,3,-127,21,37,-24,-22,52, 
  /* [6][0][][] */ -94,-58,-3,111,-69,22,-76,45,-119,-127,-56,-79,24,66,27,40, 
  /* [7][0][][] */ -5,23,-127,65,23,-113,-36,79,26,-33,16,-13,1,24,-37,10, 
  /* [8][0][][] */ 19,-55,15,-5,-1,50,-63,-88,-20,27,-72,-4,-127,-4,13,8, 
  /* [9][0][][] */ 47,-44,48,127,16,-21,-20,-88,122,-96,16,-34,6,74,-50,82, 
  /* [10][0][][] */ -127,-63,-47,-62,65,13,24,35,75,-35,-46,25,123,-113,-73,113, 
  /* [11][0][][] */ 47,-21,-127,29,41,23,-25,44,-6,-30,5,-16,7,26,-26,-11, 
  /* [12][0][][] */ 103,-42,-10,36,7,-32,-52,-37,73,49,-127,-2,-51,-31,15,57, 
  /* [13][0][][] */ 43,-37,3,-65,127,14,-63,-68,50,-82,3,17,-10,26,12,20, 
  /* [14][0][][] */ -62,28,-80,-57,57,-127,49,-62,20,42,16,-103,19,91,-14,15, 
  /* [15][0][][] */ 20,4,70,33,42,-49,-57,-29,21,-68,-56,-2,-127,-53,-28,35, 
  /* [16][0][][] */ -127,41,37,10,13,77,12,58,-22,-4,104,-9,-47,25,40,-53, 
  /* [17][0][][] */ -10,-22,-60,-33,-29,-8,23,51,-11,127,-29,0,-12,79,78,1, 
  /* [18][0][][] */ 35,127,-74,-13,-6,0,62,-72,23,119,-67,92,35,-45,0,-82, 
  /* [19][0][][] */ 19,-10,16,27,5,31,14,16,29,13,-56,-15,-127,4,-11,44, 
  /* [20][0][][] */ 119,-83,28,-90,-24,20,20,-80,-51,-2,-127,-43,73,10,73,-5, 
  /* [21][0][][] */ 56,3,127,28,-37,33,11,-11,-13,26,-15,-28,-24,46,-18,-7, 
  /* [22][0][][] */ 31,17,34,40,-6,-17,46,127,9,-1,9,56,-16,3,-7,4, 
  /* [23][0][][] */ -25,18,-59,28,20,-127,8,33,-1,-33,-6,-7,-53,21,5,14, 
  /* [24][0][][] */ 33,-62,-22,-72,48,-33,-34,-24,35,39,65,69,-31,68,127,36, 
  /* [25][0][][] */ -127,-78,-39,14,43,6,9,-41,-9,-4,-77,23,34,61,42,42, 
  /* [26][0][][] */ 15,-6,61,-26,-2,8,-37,48,-70,-53,-10,12,-15,-127,35,0, 
  /* [27][0][][] */ -93,31,-40,38,46,-11,9,9,68,-15,127,20,-49,8,-14,-29, 
  /* [28][0][][] */ -7,-4,20,24,-3,3,23,96,32,25,-28,-18,-127,-10,-12,49, 
  /* [29][0][][] */ -4,49,59,-31,23,-21,10,-8,-127,24,-44,12,-11,34,-63,16, 
  /* [30][0][][] */ -18,-1,-127,-41,9,-47,-7,37,-45,-16,9,-34,-57,-23,25,-7, 
  /* [31][0][][] */ 127,-28,-122,31,44,18,-17,39,-15,0,-110,-39,45,-38,-94,44, 
  /* [32][0][][] */ -126,16,25,45,37,96,19,29,41,3,127,16,-43,33,-13,-24, 
  /* [33][0][][] */ 35,-22,127,-7,-90,58,22,-39,0,39,-3,32,-10,16,25,47, 
  /* [34][0][][] */ -54,-49,-60,-124,-3,25,10,-27,-24,-90,-23,-127,-23,1,32,9, 
  /* [35][0][][] */ -3,-38,18,38,47,-15,8,-31,-73,33,-23,17,-26,127,-30,-19, 
  /* [36][0][][] */ -96,30,-32,-5,1,-10,62,84,5,19,127,-21,35,26,-1,-32, 
  /* [37][0][][] */ -46,22,127,-29,-79,-40,30,-48,20,14,2,-4,-31,-73,81,0, 
  /* [38][0][][] */ 16,5,10,28,47,-49,-49,31,-13,-16,62,-12,127,47,-38,15, 
  /* [39][0][][] */ -9,-41,-51,-10,-44,-127,45,75,-14,-10,-6,-29,19,82,101,93, 
  /* [40][0][][] */ 76,-3,1,5,-24,69,-10,20,10,12,-4,10,127,-1,-18,-21, 
  /* [41][0][][] */ 15,-27,-55,-127,-4,-11,-33,-72,0,-51,38,-71,14,-11,29,37, 
  /* [42][0][][] */ 49,25,11,127,-93,13,-69,19,-62,-86,49,-48,-13,121,-31,15, 
  /* [43][0][][] */ 2,111,-29,127,6,28,39,-59,-40,92,-4,22,6,-49,81,14, 
  /* [44][0][][] */ -17,-30,-127,7,45,98,-48,56,-2,-55,40,-39,5,-18,-41,2, 
  /* [45][0][][] */ 0,15,4,-127,-22,6,51,-3,1,14,-28,0,12,-78,47,-31, 
  /* [46][0][][] */ 16,19,64,-20,-2,7,-58,61,15,-64,-37,6,24,127,29,-4, 
  /* [47][0][][] */ 14,-15,13,-60,-30,18,-59,55,-6,-30,8,40,-5,-127,30,37, 
  /* [48][0][][] */ 8,-9,25,-127,3,-27,-10,4,9,-10,13,-10,-7,43,-23,63, 
  /* [49][0][][] */ 27,-38,9,120,103,20,15,52,-60,10,65,54,-19,35,127,-5, 
  /* [50][0][][] */ -1,0,54,-20,8,127,-9,-53,58,-5,73,53,96,3,-21,-23, 
  /* [51][0][][] */ 31,41,2,19,26,-7,-50,0,49,3,-13,127,10,20,41,-39, 
  /* [52][0][][] */ -21,73,97,10,-5,16,30,-49,-35,25,28,33,-30,49,-127,-12, 
  /* [53][0][][] */ -24,-36,-77,-127,-71,39,31,-108,-33,87,52,-3,47,-100,85,2, 
  /* [54][0][][] */ -3,17,-11,-51,32,0,-30,10,23,-31,18,-32,-16,127,8,8, 
  /* [55][0][][] */ -29,-33,-39,-42,12,-23,-12,-127,3,-74,8,-9,-59,-124,-33,-69, 
  /* [56][0][][] */ 44,52,29,76,26,-11,13,127,37,-4,11,-17,89,-23,-63,43, 
  /* [57][0][][] */ 117,32,127,-14,-120,-23,2,-67,20,16,-101,16,73,-109,45,65, 
  /* [58][0][][] */ 127,88,59,91,-119,-29,-12,29,-9,26,81,-77,-92,-52,-21,-49, 
  /* [59][0][][] */ 123,-17,-6,18,-9,-28,6,-15,-14,0,-127,-20,44,-4,5,6, 
  /* [60][0][][] */ -127,30,-25,9,28,-2,-8,25,15,45,41,20,-30,-4,23,-30, 
  /* [61][0][][] */ -60,47,-29,33,-7,-20,-49,-3,127,-44,77,-45,51,-10,-56,-33, 
  /* [62][0][][] */ -37,-23,-127,41,72,87,-12,70,19,-50,42,-12,-89,-31,-104,9, 
  /* [63][0][][] */ -82,-11,127,-49,-83,-75,21,-43,-4,38,6,6,11,-49,91,25, 
  /* [64][0][][] */ 16,71,-43,25,85,17,127,-94,0,84,-10,25,-17,-103,-21,44, 
  /* [65][0][][] */ -6,24,-3,4,84,-14,5,-127,-32,-94,-30,-45,-16,-61,57,-9, 
  /* [66][0][][] */ -127,9,-22,-5,-29,8,23,-35,-66,-20,-72,38,57,18,30,96, 
  /* [67][0][][] */ 10,-34,32,127,-32,-11,-37,43,26,-5,16,-27,5,-50,-118,-43, 
  /* [68][0][][] */ 4,-5,-7,127,-45,-8,12,-34,-33,21,5,-12,1,-63,-23,-24, 
  /* [69][0][][] */ 66,68,1,72,34,-25,46,-127,7,112,0,55,17,-36,16,-4, 
  /* [70][0][][] */ 26,-3,-3,-127,77,-65,99,51,85,-23,117,-88,-53,95,65,104, 
  /* [71][0][][] */ 39,48,1,93,49,-127,-44,101,43,-118,-9,18,27,-49,-67,48, 
  /* [72][0][][] */ -127,-94,-28,47,20,43,-55,-4,-51,-9,-91,38,26,15,-29,69, 
  /* [73][0][][] */ -13,-13,-45,57,23,-19,-7,-24,95,0,23,19,19,127,-89,-36, 
  /* [74][0][][] */ 67,-7,18,-37,-50,-8,43,-42,-33,-7,-127,5,-100,-21,5,46, 
  /* [75][0][][] */ 1,-41,-16,127,-30,2,-2,-19,-80,22,-21,-25,16,-47,-10,-20, 
  /* [76][0][][] */ 0,13,-28,44,37,8,-21,-127,18,-95,15,5,-17,-29,29,-27, 
  /* [77][0][][] */ 127,-21,26,26,-38,-14,-39,6,33,-28,-7,34,37,37,-37,35, 
  /* [78][0][][] */ -20,5,63,-17,37,-2,-40,84,26,-52,-25,-30,45,127,13,-12, 
  /* [79][0][][] */ -11,-12,71,25,23,78,-52,-65,4,-26,70,-21,127,-16,-24,-63, 
  /* [80][0][][] */ -56,-121,-4,94,-3,16,7,17,-61,9,-127,26,31,-24,-46,64, 
  /* [81][0][][] */ 57,13,-110,44,127,108,-44,-28,25,-123,-22,-82,-40,-14,-92,18, 
  /* [82][0][][] */ 127,119,17,45,-108,-17,-72,-32,-85,25,78,-44,-35,86,-50,-2, 
  /* [83][0][][] */ 127,46,19,-35,22,-18,-14,17,42,31,80,-34,-48,-29,-34,-80, 
  /* [84][0][][] */ 2,-47,-71,-12,44,11,8,-127,-39,-42,23,30,-16,-30,29,-5, 
  /* [85][0][][] */ -10,15,-26,-50,-36,1,78,127,-28,122,-23,-65,25,79,80,-26, 
  /* [86][0][][] */ 103,-13,28,26,-7,-38,14,-43,-17,4,-127,12,78,3,-36,-6, 
  /* [87][0][][] */ -30,38,45,-60,-55,93,-52,104,17,-66,58,-12,9,-127,2,9, 
  /* [88][0][][] */ -5,-47,-127,-65,61,-17,-27,-89,13,-1,-32,-12,24,-25,-9,36, 
  /* [89][0][][] */ 45,-58,59,-127,39,-10,-27,90,56,-41,3,5,5,12,16,21, 
  /* [90][0][][] */ 10,-5,-52,66,92,-27,114,-124,126,127,-62,15,26,42,-2,-17, 
  /* [91][0][][] */ 24,-4,-49,-16,3,-127,-4,-2,-20,-17,-42,11,37,-24,18,20, 
  /* [92][0][][] */ -9,-23,127,35,35,29,-18,27,-34,26,-50,27,-27,47,-18,9, 
  /* [93][0][][] */ 125,-64,-55,-18,-8,-102,1,30,-31,40,-127,-25,39,44,-4,81, 
  /* [94][0][][] */ 7,-12,65,62,116,-36,-25,83,0,-16,-10,85,8,127,-48,-73, 
  /* [95][0][][] */ -123,45,11,27,22,28,34,9,9,25,127,-1,-35,15,-16,-32, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00048716581659391522, 0.0008056933875195682, 0.00042894642683677375, 0.0031064068898558617, 0.00077980931382626295, 0.00057457748334854841, 0.00055662030354142189, 0.0013115302426740527, 0.0012283541727811098, 0.00035647189361043274, 0.00070324348052963614, 0.0010187671286985278, 0.0011307169916108251, 0.00056671589845791459, 0.00078501645475625992, 0.0012797483941540122, 0.00078496115747839212, 0.00092874484835192561, 0.00075109925819560885, 0.00225292076356709, 0.0012117046862840652, 0.00092029175721108913, 0.0012066845083609223, 0.00085129949729889631, 0.00085517135448753834, 0.0013823495246469975, 0.00080067897215485573, 0.00060523190768435597, 0.0019046458182856441, 0.001347046927548945, 0.00070571497781202197, 0.00043087665108032525, 0.00048292195424437523, 0.0016407042276114225, 0.0007458061445504427, 0.0022824243642389774, 0.00049373804358765483, 0.00070090783992782235, 0.0022419104352593422, 0.00081746093928813934, 0.0014495142968371511, 0.00064970290986821055, 0.00058318197261542082, 0.00045175006380304694, 0.00083000113954767585, 0.0012064257171005011, 0.00061513646505773067, 0.0008008880540728569, 0.0010000448673963547, 0.0010033276630565524, 0.0019557799678295851, 0.003088801633566618, 0.00057026080321520567, 0.00057727866806089878, 0.00086091604316607118, 0.00039620892493985593, 0.0012733585899695754, 0.00052883714670315385, 0.00075401033973321319, 0.0011523606954142451, 0.00050214165821671486, 0.0011997305555269122, 0.0011520495172590017, 0.00072909373557195067, 0.00060313963331282139, 0.00085255212616175413, 0.0015677694464102387, 0.0015987015794962645, 0.00042966322507709265, 0.00048168035573326051, 0.00043061078758910298, 0.0010789665393531322, 0.0009362886194139719, 0.0012364129070192575, 0.0012266411213204265, 0.0010064243106171489, 0.00038691653753630817, 0.0010357470018789172, 0.00041460007196292281, 0.0015156242297962308, 0.00069890875602141023, 0.0010234074434265494, 0.0007704318268224597, 0.0018428866751492023, 0.00096052844310179353, 0.00099626055452972651, 0.00059746799524873495, 0.00061829201877117157, 0.00067275704350322485, 0.0012454473180696368, 0.00038541419780813158, 0.0018760127713903785, 0.000973099609836936, 0.00033783356775529683, 0.0012566236546263099, 0.00074359949212521315, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -37025, 3609, 3062, -8218, -2233, 59, -7382, -43369, 3003, 21281, 36221, -7589, 1941, -19705, 41694, -48179, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00062186311697587371, 0.00074668781599029899, 0.0010861707851290703, 0.00096206262242048979, 0.00095119292382150888, 0.0011689066886901855, 0.00097678950987756252, 0.00050490337889641523, 0.00055701477685943246, 0.00063879467779770494, 0.00062378618167713284, 0.00059748132480308414, 0.0010479303309693933, 0.0012922438327223063, 0.00053951260633766651, 0.00050907005788758397, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -18,-2,-18,7,25,-9,-14,109,-49,10,47,-15,17,2,-25,14,24,-17,-8,-9,53,-21,25,127,-15,107,-3,-19,18,-22,25,-25,-35,45,24,-48,15,38,25,6,-118,-33,23,22,34,29,-121,-50, 
  /* [1][0][][] */ -37,-8,22,14,-28,6,-2,47,-57,-36,2,-49,-24,-23,-12,-1,-26,116,-14,17,-4,5,-32,-15,16,-46,22,26,-34,-88,-30,18,-28,0,35,-5,2,-49,4,14,-16,-19,127,7,17,-4,22,-13, 
  /* [2][0][][] */ -23,-5,-10,-29,1,-63,-2,-26,3,8,24,25,16,22,-14,8,-7,-20,-22,-15,-12,0,-8,-127,-8,72,-10,3,1,-20,1,-4,-11,52,12,-2,20,9,20,-1,-42,10,-16,-3,2,-6,13,12, 
  /* [3][0][][] */ -9,30,-6,-31,4,-5,0,-1,-18,-7,-2,35,-127,4,-15,2,-7,7,-20,1,-36,4,8,20,-10,-10,-1,25,1,21,10,18,7,-2,17,17,-14,25,44,9,13,7,21,-31,6,-9,3,21, 
  /* [4][0][][] */ 25,-40,9,17,31,33,23,-23,-27,-1,-14,-18,8,-3,10,13,19,-7,-72,2,-7,15,10,69,-3,-33,5,46,4,-78,21,10,24,-33,30,-127,14,31,-2,13,-12,29,5,-15,-12,-16,13,5, 
  /* [5][0][][] */ 36,1,-35,68,-3,-16,4,28,5,-4,50,14,1,73,4,1,-28,20,33,8,5,10,5,-28,2,-47,3,-15,-3,-4,6,4,59,-127,0,24,-32,-11,8,2,-105,45,22,-5,-11,2,-119,-11, 
  /* [6][0][][] */ 26,-5,10,0,-20,-2,2,-11,-5,4,-4,0,-18,9,-10,0,7,-13,127,12,2,5,26,-37,7,5,28,-10,-14,-2,-8,6,2,-16,26,-41,-6,-40,72,24,0,-16,-7,3,-9,3,6,-3, 
  /* [7][0][][] */ -53,-25,-28,37,-10,72,6,54,-3,33,-5,127,87,-5,2,4,-17,-29,-10,-26,-44,-13,-20,69,-5,-30,-61,-28,0,-18,-21,-17,3,-7,-25,-8,8,-60,101,-6,24,33,-72,-60,18,-6,-3,13, 
  /* [8][0][][] */ -38,-46,-8,2,-12,8,6,35,-8,-77,-4,39,46,2,10,9,-1,57,-28,15,-35,38,2,-12,1,2,18,44,-14,109,-14,8,4,11,-16,-127,-101,60,24,29,23,-12,118,-15,23,27,8,32, 
  /* [9][0][][] */ -24,9,11,37,24,-31,-10,-11,56,-46,11,56,-61,9,13,-10,-8,12,-35,-27,54,3,-20,-21,-6,5,52,-28,15,8,12,8,0,26,84,-98,2,-127,-99,19,-27,30,59,17,10,8,-15,-44, 
  /* [10][0][][] */ -22,-7,-44,-121,42,75,16,-27,3,32,29,17,53,-64,-19,29,42,-43,66,-33,40,-19,38,56,-44,-127,-5,-36,41,37,44,-44,-33,-70,30,-5,18,-34,-2,-54,-37,-56,-15,22,7,5,24,-34, 
  /* [11][0][][] */ 6,50,-17,65,29,-66,-82,-12,-9,53,-30,-9,-5,59,-5,-73,11,44,4,6,-65,-97,18,1,-4,-35,33,-19,70,-43,18,-97,58,-7,-38,-106,106,21,-2,-127,7,55,112,-66,6,-71,18,42, 
  /* [12][0][][] */ 115,-4,-18,8,3,19,-4,93,23,-7,-41,-20,-4,23,-5,-4,-6,0,-7,4,4,-4,3,10,-2,19,-9,5,-4,12,-10,4,0,-64,-8,10,-16,-18,-29,1,-25,-83,4,-127,-61,-18,83,-6, 
  /* [13][0][][] */ 13,1,0,4,8,-12,-4,-1,-3,5,-1,18,-3,-5,7,-2,8,-1,8,0,9,-12,7,-2,3,-1,21,127,7,-3,12,0,2,1,-38,20,8,-4,2,-11,-6,-4,-1,7,2,-4,-11,-5, 
  /* [14][0][][] */ 63,-18,57,-74,40,42,47,-108,-57,-46,-5,113,-72,-17,63,10,55,30,-58,55,19,19,74,-28,34,38,-35,-118,28,-40,55,48,14,61,-127,-48,-42,59,92,12,-43,11,59,15,-6,6,27,-25, 
  /* [15][0][][] */ -13,-60,-67,-41,61,49,84,-47,-19,10,-23,-35,100,-6,-98,68,65,55,90,-95,-115,-10,56,-22,-85,41,44,50,60,48,44,-45,36,60,106,124,-16,-126,-14,-30,113,72,127,-54,11,-17,-16,80, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.026429181918501854, 0.031734231859445572, 0.046162258833646774, 0.040887661278247833, 0.040425699204206467, 0.049678534269332886, 0.041513551026582718, 0.021458392962813377, 0.023673126474022865, 0.027148773893713951, 0.026510912925004959, 0.025392957031726837, 0.04453703761100769, 0.054920360445976257, 0.02292928472161293, 0.021635476499795914, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 1165, 33077, -661, 38516, 5166, 117720, -3708, 49423, 1440, 31585, 28714, 2261, -2780, 32347, 1028, -2581, -275, 0, 617, -3916, -1139, -6587, 981, -17825, -3825, 43382, 122050, 97618, 2624, 3290, -181, 3979, 23067, 54, 22849, -1659, 58880, -1026, 39494, 2961, -88, 62809, -1477, 1142, 47701, 2034, 6953, 52443, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.4409861301537603e-05, 4.4448013795772567e-05, 0.00021778573864139616, 5.7159020798280835e-05, 0.00013427560043055564, 7.4966883403249085e-05, 0.00012186266394564882, 0.00012027432967443019, 9.369696635985747e-05, 4.9894952098838985e-05, 4.7655794332968071e-05, 9.417812543688342e-05, 5.2083305490668863e-05, 4.3545140215428546e-05, 0.00012643133231904358, 0.00013753867824561894, 0.00021108187502250075, 9.1313180746510625e-05, 0.00013567444693762809, 0.00013978884089738131, 9.8679876828100532e-05, 0.00018089836521539837, 7.9969591752160341e-05, 0.00011564504529815167, 0.00011238908336963505, 0.00010064483649330214, 2.1256661057122983e-05, 7.5232201197650284e-05, 0.00012345287541393191, 0.00010817025031428784, 9.2675130872521549e-05, 0.00014923236449249089, 5.3421863412950188e-05, 0.00014534700312651694, 3.2185507734538987e-05, 5.6672208302188665e-05, 9.8618300398811698e-05, 0.00011218793952139094, 0.00015238122432492673, 0.00013355107512325048, 0.00012451714428607374, 9.3483511591330171e-05, 0.00010627853771438822, 0.0001041126306517981, 3.1373205274576321e-05, 0.00014903883857186884, 7.6301410445012152e-05, 3.4283249988220632e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 71,-92,96,72,54,-32,106,-64,60,-88,-85,46,53,-43,-72,-90,108,82,50,80,68,-72,-80,53,-30,-39,-62,-67,-66,61,-65,-113,-16,41,69,62,-64,53,-49,-23,52,-71,54,64,-92,9,74,-35, 80,-96,127,87,-75,-67,-58,-86,95,-100,-62,73,82,-110,-95,89,-41,99,82,127,85,-112,53,73,-51,-78,-68,-82,57,77,-32,-127,-87,83,81,83,-81,83,-85,-18,76,-92,78,90,-74,-127,92,-110, 37,-49,70,39,19,-42,-47,-39,43,-31,2,33,30,-89,-54,0,-59,38,34,68,31,-52,32,28,-26,-49,-43,-23,30,31,87,-88,-78,43,35,34,-31,39,-38,-11,43,-42,31,44,-6,-9,38,-75, 
  /* [0][1][][] */ 92,-109,-41,93,55,-82,127,-89,88,-113,-71,85,83,-109,-13,-127,127,106,74,-39,84,107,-127,74,72,-79,-94,-102,-127,86,-69,-7,-87,72,106,95,-86,77,-83,93,85,-98,87,93,-88,106,93,-87, 127,-127,-68,127,-127,-127,-93,-127,127,-127,-127,127,127,-127,-24,94,-69,127,127,-51,127,127,67,127,127,-127,-127,-127,54,127,-29,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-12,127,-127, 65,-78,-31,67,37,-64,-49,-62,57,-44,-60,58,47,-59,-16,10,-68,49,58,-28,60,64,50,65,67,-68,-62,-45,34,55,127,16,-61,70,48,50,-50,58,-64,59,61,-58,55,62,-57,-67,61,-60, 
  /* [0][2][][] */ 45,-53,-45,48,26,-50,67,-42,41,-71,-5,40,56,-75,84,-79,75,48,36,-31,29,-10,-77,33,-25,-47,-49,-50,-75,31,-42,89,-72,37,47,43,-25,38,-43,-86,48,-52,37,47,-22,16,40,-79, 73,-71,-46,81,-57,-62,-71,-69,54,-80,-65,61,75,-53,127,32,-50,60,61,-46,56,-17,40,68,-51,-70,-79,-62,31,62,-24,115,-54,63,56,60,-48,60,-67,-109,70,-67,57,65,-82,48,63,-52, 42,-43,-25,47,28,-20,-17,-35,13,-32,-55,27,31,-2,69,25,-40,19,28,-30,29,1,39,42,-22,-31,-49,-25,32,34,60,67,0,33,14,25,-23,31,-29,-54,30,-35,24,29,-60,9,32,-5, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0035874189343303442, 0.0018890405772253871, 0.0092558935284614563, 0.0024292583111673594, 0.0057067130692303181, 0.0031860924791544676, 0.0051791630685329437, 0.0051116589456796646, 0.0039821211248636246, 0.0021205353550612926, 0.0020253711845725775, 0.0040025701746344566, 0.0022135404869914055, 0.0018506684573367238, 0.0053733312524855137, 0.0058453935198485851, 0.0089709796011447906, 0.0038808102253824472, 0.0057661640457808971, 0.0059410259127616882, 0.0041938945651054382, 0.0076881800778210163, 0.00339870760217309, 0.0049149142578244209, 0.0047765360213816166, 0.0042774053290486336, 0.00090340810129418969, 0.0031973684672266245, 0.0052467468194663525, 0.0045972354710102081, 0.0039386930875480175, 0.0063423751853406429, 0.0022704291623085737, 0.0061772475019097328, 0.001367884106002748, 0.0024085687473416328, 0.0041912775486707687, 0.0047679874114692211, 0.0064762020483613014, 0.0056759207509458065, 0.0052919783629477024, 0.0039730491116642952, 0.004516837652772665, 0.0044247866608202457, 0.0013333612587302923, 0.0063341506756842136, 0.0032428100239485502, 0.001457038102671504, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 741, 1089, 2101, 820, 9796, 14761, 2766, 63, -816, -630, 1142, 959, 3973, 1425, 23503, 3728, 2815, -1579, -382, 3605, -1673, 13076, 11230, 10465, 5558, 278, 4556, 5164, 6601, -646, 8982, 6797, 688, -151, 5278, 4687, -1910, 315, -882, 5541, 1660, -466, -1451, 177, 1154, 3678, 515, 1102, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00033203294151462615, 0.00064221915090456605, 0.00026880161021836102, 0.00027046827017329633, 0.0002225335338152945, 0.00027090706862509251, 0.0004055203462485224, 0.00023406877880915999, 0.00037702106055803597, 0.0006430224166251719, 0.00084025715477764606, 0.00029088323935866356, 0.00031052937265485525, 0.00062341045122593641, 0.00015379712567664683, 0.00034832826349884272, 0.00021142225887160748, 0.00030102310120128095, 0.0001988244621315971, 0.00024706331896595657, 0.00034655912895686924, 0.00019497571338433772, 0.00032517942599952221, 0.00015171019185800105, 0.00028809873037971556, 0.00028899361495859921, 0.0015349773457273841, 0.00037348989280872047, 0.00025769876083359122, 0.00039697258034721017, 0.00029220199212431908, 0.0001780541060725227, 0.00061932916287332773, 0.00026307266671210527, 0.00070079206489026546, 0.00040246357093565166, 0.00072790682315826416, 0.00029428463312797248, 0.0002311936259502545, 0.0003324485442135483, 0.00013998507347423583, 0.00023479465744458139, 0.00022663350682705641, 0.00023345983936451375, 0.0017024250701069832, 0.00036704694502986968, 0.00033004392753355205, 0.0010821988107636571, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,4,-1,64,-36,38,19,-30, 
  /* [1][0][][] */ 43,57,53,10,17,-41,93,127, 
  /* [2][0][][] */ -45,-5,5,-7,-127,-2,4,-1, 
  /* [3][0][][] */ 88,8,-9,-116,-127,14,30,-16, 
  /* [4][0][][] */ -127,39,-30,5,90,-17,64,46, 
  /* [5][0][][] */ -109,-33,17,-7,-127,9,4,78, 
  /* [6][0][][] */ -33,-127,30,-23,16,-2,-1,31, 
  /* [7][0][][] */ -58,-11,7,84,127,-24,-32,-5, 
  /* [8][0][][] */ 58,20,-6,-127,-5,-23,-42,-36, 
  /* [9][0][][] */ 2,-127,-26,-5,9,90,-57,61, 
  /* [10][0][][] */ -99,-13,5,7,-127,67,80,-16, 
  /* [11][0][][] */ 126,16,40,14,-73,-43,-33,-127, 
  /* [12][0][][] */ 6,9,41,-9,6,-86,127,74, 
  /* [13][0][][] */ 72,-21,-30,-19,127,119,118,-60, 
  /* [14][0][][] */ 127,48,-27,26,-57,-12,-17,-11, 
  /* [15][0][][] */ -20,-127,3,-11,12,-1,-12,17, 
  /* [16][0][][] */ -67,-4,-7,-8,-127,12,6,9, 
  /* [17][0][][] */ -20,91,-94,7,4,-127,110,-75, 
  /* [18][0][][] */ 127,-32,-33,19,-48,27,13,109, 
  /* [19][0][][] */ 127,-44,-10,2,44,-14,50,10, 
  /* [20][0][][] */ 126,28,-24,127,12,28,-7,-46, 
  /* [21][0][][] */ 5,64,-77,-6,3,99,-108,-127, 
  /* [22][0][][] */ -127,21,30,13,-32,-19,-51,-20, 
  /* [23][0][][] */ -37,-53,10,19,-127,61,78,-18, 
  /* [24][0][][] */ 127,-1,-31,7,-54,-30,5,11, 
  /* [25][0][][] */ 21,-16,-5,-30,127,51,57,-22, 
  /* [26][0][][] */ 0,-90,10,-36,-2,-127,75,-50, 
  /* [27][0][][] */ -13,-127,24,-14,-3,-59,23,-9, 
  /* [28][0][][] */ -59,20,-16,-10,2,-6,127,76, 
  /* [29][0][][] */ -15,39,8,1,-11,31,-102,-127, 
  /* [30][0][][] */ 127,-26,5,9,-73,6,-41,-38, 
  /* [31][0][][] */ 13,-18,38,-16,17,-127,124,53, 
  /* [32][0][][] */ -75,22,-13,22,-127,-127,-120,67, 
  /* [33][0][][] */ -24,5,-2,21,-127,-55,-37,22, 
  /* [34][0][][] */ 14,-127,44,-6,-2,75,-67,64, 
  /* [35][0][][] */ -22,-45,-127,-9,-3,-75,40,-60, 
  /* [36][0][][] */ 8,127,49,4,-16,11,-22,-34, 
  /* [37][0][][] */ -127,34,37,-22,47,-33,-5,-106, 
  /* [38][0][][] */ -127,-21,-52,-3,46,22,31,110, 
  /* [39][0][][] */ 6,-6,57,-15,1,-86,127,55, 
  /* [40][0][][] */ -46,-19,-12,-26,-122,105,127,-41, 
  /* [41][0][][] */ -127,53,11,-75,-92,-104,-100,50, 
  /* [42][0][][] */ -46,-127,-98,-4,-13,98,-96,-78, 
  /* [43][0][][] */ -71,4,-19,-127,102,81,74,-11, 
  /* [44][0][][] */ 127,-10,11,-77,22,-36,-22,29, 
  /* [45][0][][] */ -12,-124,14,-27,-7,-79,127,20, 
  /* [46][0][][] */ 103,-4,-1,-22,127,-25,-23,-3, 
  /* [47][0][][] */ 127,-1,-22,112,-6,28,12,-55, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0006576510495506227, 0.0012720306403934956, 0.00053240999113768339, 0.00053571112221106887, 0.00044076773338019848, 0.00053658022079616785, 0.00080320605775341392, 0.00046361537533812225, 0.00074675813084468246, 0.0012736216885969043, 0.0016642806585878134, 0.00057614664547145367, 0.00061505933990702033, 0.00123477668967098, 0.00030462289578281343, 0.0006899268482811749, 0.0004187598533462733, 0.00059623044217005372, 0.00039380765520036221, 0.00048935337690636516, 0.00068642274709418416, 0.0003861845179926604, 0.00064407644094899297, 0.00030048936605453491, 0.00057063141139224172, 0.00057240389287471771, 0.0030402990523725748, 0.00073976401472464204, 0.00051041878759860992, 0.00078627566108480096, 0.0005787586560472846, 0.00035266822669655085, 0.0012266929261386395, 0.00052106281509622931, 0.0013880449114367366, 0.0007971515879034996, 0.0014417505590245128, 0.00058288371656090021, 0.00045792059972882271, 0.00065847422229126096, 0.00027726564439944923, 0.00046505310456268489, 0.00044888848788104951, 0.00046240925439633429, 0.0033719595521688461, 0.00072700256714597344, 0.0006537114386446774, 0.0021434896625578403, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -34793, 23615, -13418, -12756, 20643, 1673, 32912, 43257, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00041186966700479388, 0.00068052468122914433, 0.001319766859523952, 0.0015904456377029419, 0.00081809225957840681, 0.00054517004173249006, 0.00056912936270236969, 0.00086842832388356328, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -68,-23,-50,23,6,-37,4,1,-103,125,-34,124,127,12,75,-15,-8,-41,-1,9,-4,-4,-15,-28,34,-87,14,63,-11,7,15,-46,10,-91,116,7,-7,-11,-10,-32,100,13,48,-26,-28,22,-20,-11, 
  /* [1][0][][] */ 5,38,127,13,-8,-33,4,-83,29,3,27,12,-22,11,-6,-119,6,-61,8,9,-24,51,27,-29,-18,-13,16,5,22,-10,18,0,-6,16,16,11,-10,-45,70,-54,8,33,-8,33,-8,4,26,-2, 
  /* [2][0][][] */ 7,-41,14,-41,39,32,1,-26,9,-4,3,12,1,62,3,1,-30,127,-25,-33,-13,25,-31,-6,125,-4,2,-9,-26,-15,2,-33,-7,-9,1,8,-8,1,-11,7,21,-18,-16,1,0,24,-29,-35, 
  /* [3][0][][] */ 1,-90,-1,9,11,3,-4,2,-9,-6,19,28,6,-10,49,6,-2,-27,0,14,-9,23,-25,-2,10,52,-5,3,-8,8,127,-1,13,2,1,2,-21,-14,-1,15,-12,1,-14,26,-16,-5,-8,33, 
  /* [4][0][][] */ -106,16,1,-3,8,-35,1,5,43,-46,17,-18,-25,-5,-19,-16,3,12,-10,46,24,-29,27,6,-6,44,2,127,-3,-10,-2,-21,4,-124,-34,13,6,-6,6,0,-53,-4,-9,15,-58,1,0,5, 
  /* [5][0][][] */ -11,26,16,1,-58,4,1,37,34,-2,9,6,-16,-49,4,41,1,-86,21,13,53,-46,3,35,5,6,-86,-40,-40,-19,21,-3,-2,-73,-9,-60,71,2,-44,18,14,-38,0,7,127,-7,-43,-12, 
  /* [6][0][][] */ -43,-31,-5,-1,38,-50,-4,-22,-11,-6,37,-26,-13,38,-4,-56,-8,10,-2,-16,-30,43,-7,-86,1,-12,-55,-57,19,47,-22,-3,-1,-71,-23,73,-89,-46,15,-62,-1,19,16,39,127,-29,35,9, 
  /* [7][0][][] */ 19,26,-81,25,-21,14,-4,62,0,-1,65,-41,13,-24,1,-2,-16,-127,36,-46,65,35,23,-61,31,-17,37,-1,-19,24,-13,-4,1,31,-10,-31,-4,-59,-37,-68,-6,-36,33,66,-18,-25,-1,8, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.017504461109638214, 0.028922298923134804, 0.056090090423822403, 0.067593939602375031, 0.034768920391798019, 0.023169726133346558, 0.024187996983528137, 0.03690820187330246, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -51337, 490, 13402, 592, 6991, -2535, 2842, 46527, 2020, 35474, -1848, 25173, -7078, -1187, 34676, 24726, -274, 23013, 30166, 10689, -731, -736, -231, 20854, -8034, 33567, 43147, 34514, 2868, 3895, -2212, 458, 2073, 19426, -6473, 21720, -11537, 22129, -22695, 146658, 44825, 21035, 13077, -1650, 16499, 3839, 1595, 308, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0002291064738528803, 0.00022202689433470368, 0.00014299926988314837, 0.00019330946088302881, 0.00012167804379714653, 9.9152624898124486e-05, 0.00039820361416786909, 7.5307223596610129e-05, 0.00010354406549595296, 0.00014506866864394397, 8.1468242569826543e-05, 0.00016985172987915576, 0.00021745589037891477, 0.00016102893278002739, 7.3224568041041493e-05, 6.4320258388761431e-05, 0.00013868411770090461, 0.00015510711818933487, 7.5488103902898729e-05, 0.0001259439013665542, 0.00018291317974217236, 0.00021183986973483115, 0.00013319154095370322, 0.00010170193127123639, 0.00016286731988657266, 0.00010866496450034901, 0.00054123549489304423, 9.2111084086354822e-05, 0.00021330374875105917, 0.00022174078912939876, 0.0001140558670158498, 0.00019843815243802965, 0.00043241400271654129, 0.00014344920055009425, 0.00016866334772203118, 0.00011505262227728963, 0.00030808543669991195, 0.00012517532741185278, 0.00021134308190084994, 1.7736196241457947e-05, 7.0429239713121206e-05, 4.9378442781744525e-05, 0.00012314383639022708, 0.00014397646009456366, 0.00013762134767603129, 9.2483074695337564e-05, 0.00015519894077442586, 7.7872718975413591e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-4,20,109,5,82,-1,28,13,7,9,8,-8,-9,-44,8,-3,8,-20,-115,-6,-23,127,-9,-3,4,-4,9,-5,4,16,99,20,29,37,-28,1,34,-2,3,18,-72,-7,-9,16,4,-5,-10, 127,9,15,-127,28,87,11,10,119,127,7,44,-49,-24,6,8,127,-56,-56,-59,-99,25,-111,15,17,68,-29,-84,23,21,10,-121,6,-60,127,10,-40,-47,-5,120,-78,-100,-30,3,-34,-8,-127,23, -32,-3,8,14,0,66,5,17,26,9,-15,33,-14,-4,15,3,-104,29,-3,77,-31,-12,-19,-5,-4,-59,-1,30,-16,4,5,-20,8,-23,17,-18,-1,48,43,-11,50,40,-16,13,-43,3,-1,-6, 
  /* [0][1][][] */ 125,6,0,-98,13,-26,35,-16,7,9,-12,55,-7,-2,18,-33,-1,-49,-57,-84,9,-74,-126,-17,6,96,-15,-127,-9,31,12,-107,16,-54,-1,127,-2,58,-43,42,-61,-127,39,-88,-45,-15,-12,-5, 26,-127,-127,113,-127,-127,-127,-127,-127,-96,127,-127,127,127,36,-127,-84,127,127,-105,127,127,114,127,127,-127,-127,31,-127,-127,94,127,-127,127,-28,-42,127,-127,127,127,127,-80,127,127,127,-123,103,107, 54,5,49,-14,5,-60,44,18,-25,14,-105,-8,-1,-41,127,4,63,-65,-73,88,15,-46,12,-32,2,6,-38,71,21,39,1,4,33,-45,9,68,-5,64,67,-9,-81,9,-85,-30,28,-17,-10,5, 
  /* [0][2][][] */ -54,-8,25,-17,6,35,-37,23,7,-23,12,33,7,-7,-38,18,4,22,-13,108,5,-33,-16,-11,-2,22,0,53,-10,0,46,-31,-19,-45,-31,-40,-1,30,8,-22,10,-4,41,-37,-37,17,-11,18, 67,126,75,21,15,-20,124,35,17,-3,41,28,-5,-1,-91,26,-58,-55,-34,125,-37,48,13,21,33,-63,-41,32,76,-2,127,22,85,-27,10,-36,-26,-18,-13,120,-27,-11,-40,44,22,-32,8,-127, -43,-4,7,-4,5,-5,-61,8,-20,-11,-41,-39,19,-9,-9,12,33,24,-10,-127,23,-11,5,-8,-6,11,-10,-53,-14,5,5,9,-20,87,-37,-22,-5,35,25,-61,4,10,-37,7,-41,127,-4,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0097370250150561333, 0.0094361426308751106, 0.0060774688608944416, 0.008215651847422123, 0.0051713166758418083, 0.0042139864526689053, 0.016923652961850166, 0.0032005570828914642, 0.0044006225652992725, 0.0061654183082282543, 0.0034624002873897552, 0.0072186985053122044, 0.0092418752610683441, 0.0068437294103205204, 0.0031120439525693655, 0.0027336108032613993, 0.0058940751478075981, 0.0065920525230467319, 0.0032082442194223404, 0.0053526158444583416, 0.0077738100662827492, 0.0090031940490007401, 0.0056606405414640903, 0.004322331864386797, 0.0069218608550727367, 0.0046182610094547272, 0.023002507165074348, 0.0039147208444774151, 0.0090654091909527779, 0.0094239832833409309, 0.0048473742790520191, 0.0084336213767528534, 0.018377594649791718, 0.0060965907759964466, 0.0071681919507682323, 0.0048897364176809788, 0.013093630783259869, 0.0053199515677988529, 0.0089820809662342072, 0.00075378833571448922, 0.0029932425823062658, 0.0020985838491469622, 0.0052336128428578377, 0.0061189993284642696, 0.0058489073999226093, 0.0039305305108428001, 0.0065959547646343708, 0.0033095905091613531, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 50009, 7877, 5191, 8324, 2291, 12488, -1903, -270, 862, 2404, 3643, 415, 1823, -1080, 824, -2011, 4305, 9800, -443, 24754, 5140, 2729, 9094, -533, 4819, 5155, 23464, 12022, -46, -2689, 69, 2676, -2107, 8611, 2332, 7800, 6417, 4460, 23906, 2948, -689, 2439, 1490, 4832, 4947, 2694, -1492, 2846, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 8.6078696767799556e-05, 0.00028884204220958054, 0.00029292306862771511, 0.00039595304406248033, 0.00095292989863082767, 0.00039676562300883234, 0.0010133180767297745, 0.0010663717985153198, 0.00064617261523380876, 0.00057208834914490581, 0.00062643724959343672, 0.0004282645822968334, 0.00051648775115609169, 0.00041123403934761882, 0.00050528050633147359, 0.0018381001427769661, 0.00037499089376069605, 0.00043239747174084187, 0.0012511844979599118, 0.00010857758024940267, 0.00023552133643534034, 0.00036152018583379686, 0.00043882700265385211, 0.00089903408661484718, 0.00025076890597119927, 0.00022709321638103575, 0.00016961929213721305, 0.00030483727459795773, 0.00048990763025358319, 0.00097382155945524573, 0.00051512988284230232, 0.00030914056696929038, 0.00093377847224473953, 0.00024255670723505318, 0.0004386048240121454, 0.00023114764189813286, 0.00056472356664016843, 0.00031226171995513141, 9.9390817922540009e-05, 0.0015428646001964808, 0.00082745350664481521, 0.0011354967718943954, 0.0003578180621843785, 0.00031713215867057443, 0.00024647533427923918, 0.00039135944098234177, 0.00077524466905742884, 0.00093199312686920166, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 86,21,12,-3,127,50,-33,-42, 
  /* [1][0][][] */ -17,1,9,127,0,-2,11,17, 
  /* [2][0][][] */ 26,-127,-11,52,-9,-45,96,2, 
  /* [3][0][][] */ 127,-34,-9,7,0,-29,32,4, 
  /* [4][0][][] */ -1,-43,127,-17,4,-44,29,-90, 
  /* [5][0][][] */ 87,-27,-15,-7,127,27,-27,22, 
  /* [6][0][][] */ -37,109,-1,127,35,49,-77,-36, 
  /* [7][0][][] */ -11,127,-1,4,-3,-20,7,-1, 
  /* [8][0][][] */ 127,46,7,-1,-42,-9,-6,-39, 
  /* [9][0][][] */ -127,34,7,38,38,17,-6,-16, 
  /* [10][0][][] */ -62,-16,-1,127,54,23,-22,11, 
  /* [11][0][][] */ -127,-1,2,-36,41,1,-23,-57, 
  /* [12][0][][] */ 127,34,-3,13,-49,-23,14,-25, 
  /* [13][0][][] */ -2,78,-127,-4,-7,89,-88,76, 
  /* [14][0][][] */ -48,-39,4,127,31,19,-4,-19, 
  /* [15][0][][] */ -5,127,7,-3,-1,-14,12,-49, 
  /* [16][0][][] */ -16,-126,-12,35,9,-95,127,-51, 
  /* [17][0][][] */ 23,127,-7,-10,-9,70,-101,-21, 
  /* [18][0][][] */ 0,68,-127,11,17,77,-18,70, 
  /* [19][0][][] */ -53,2,-10,-24,-127,-15,42,45, 
  /* [20][0][][] */ -127,-69,-1,30,110,-13,39,22, 
  /* [21][0][][] */ -47,-26,-10,-4,-127,6,24,24, 
  /* [22][0][][] */ -120,-36,4,9,127,-9,46,47, 
  /* [23][0][][] */ -27,-20,-5,-11,-13,76,-127,-94, 
  /* [24][0][][] */ -7,38,-127,3,10,44,-21,66, 
  /* [25][0][][] */ 97,-31,19,127,-83,-8,17,-35, 
  /* [26][0][][] */ -3,-18,3,1,-16,112,127,-30, 
  /* [27][0][][] */ 75,-13,-12,26,127,24,42,-18, 
  /* [28][0][][] */ -3,127,-76,13,11,86,-30,116, 
  /* [29][0][][] */ -8,6,-8,-9,6,105,-127,-87, 
  /* [30][0][][] */ 5,-10,-5,-127,0,4,0,-10, 
  /* [31][0][][] */ -96,2,4,6,-127,19,10,-2, 
  /* [32][0][][] */ -24,38,5,-127,-3,14,-105,-102, 
  /* [33][0][][] */ -66,-5,12,2,-127,35,48,2, 
  /* [34][0][][] */ -127,44,-6,21,39,-16,-3,11, 
  /* [35][0][][] */ -30,127,-12,-15,-21,-110,111,-29, 
  /* [36][0][][] */ 4,47,9,-38,-15,84,-127,-30, 
  /* [37][0][][] */ 42,-73,-7,27,31,-87,127,-12, 
  /* [38][0][][] */ 2,-127,-10,-5,-12,59,-53,44, 
  /* [39][0][][] */ 0,-127,-17,-4,-4,-11,-55,-102, 
  /* [40][0][][] */ 127,28,-6,14,-52,82,-120,-95, 
  /* [41][0][][] */ 18,-116,-5,-1,10,69,-54,127, 
  /* [42][0][][] */ 78,5,-12,-127,-48,7,20,-52, 
  /* [43][0][][] */ -89,-41,15,-127,82,33,-9,-16, 
  /* [44][0][][] */ 2,-14,4,16,-14,79,127,-11, 
  /* [45][0][][] */ -127,-50,10,-9,61,11,24,-7, 
  /* [46][0][][] */ 27,55,127,-10,-11,13,28,26, 
  /* [47][0][][] */ -23,28,19,127,33,7,11,-2, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00022314413217827678, 0.00074877304723486304, 0.00075935234781354666, 0.0010264397133141756, 0.0024703058879822493, 0.001028546248562634, 0.002626851899549365, 0.0027643842622637749, 0.0016750906361266971, 0.001483040046878159, 0.0016239301767200232, 0.0011102018179371953, 0.0013389050727710128, 0.0010660530533641577, 0.0013098523486405611, 0.004764956422150135, 0.00097209902014583349, 0.0011209156364202499, 0.0032434794120490551, 0.00028146858676336706, 0.00061054830439388752, 0.00093717849813401699, 0.0011375830508768559, 0.0023305902723222971, 0.00065007503144443035, 0.00058869988424703479, 0.0004397086740937084, 0.0007902379147708416, 0.0012700008228421211, 0.0025244639255106449, 0.0013353850226849318, 0.00080139341298490763, 0.002420659177005291, 0.00062878627795726061, 0.001137007144279778, 0.00059921026695519686, 0.0014639481669291854, 0.00080948451068252325, 0.000257653504377231, 0.003999609500169754, 0.0021450300700962543, 0.0029435788746923208, 0.00092758139362558722, 0.00082211027620360255, 0.00063894467893987894, 0.0010145315900444984, 0.0020096877124160528, 0.0024160309694707394, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -7066, -23739, 24372, 25860, 6487, 1906, 38520, 7522, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0013350023655220866, 0.00087471731239929795, 0.0014455774798989296, 0.0012055299011990428, 0.001140078529715538, 0.0014035587664693594, 0.0008042316185310483, 0.00075527385342866182, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -15,0,8,-88,11,32,5,11,4,6,2,-5,99,0,1,8,0,-8,-5,0,82,-1,4,5,35,34,16,11,-1,7,2,-127,13,1,1,2,-30,2,-17,32,8,-24,-10,10,2,-1,2,5, 
  /* [1][0][][] */ -40,-12,-14,-3,44,32,-33,78,18,9,-30,-18,18,0,23,38,0,45,17,-52,1,17,127,20,-24,-5,54,-5,23,1,19,-6,10,-12,-7,-26,9,-61,11,10,-9,0,-85,-3,-35,5,-46,-101, 
  /* [2][0][][] */ -51,9,0,15,44,-4,31,26,-11,55,8,6,5,0,8,50,0,19,-127,21,-1,18,-1,-18,-33,0,34,4,13,33,33,6,1,-12,-8,-12,11,0,2,9,37,-8,-30,2,27,-62,28,14, 
  /* [3][0][][] */ -2,-5,-3,12,-6,22,5,0,63,14,2,-5,28,0,-28,-9,0,0,-10,4,-4,-1,7,-17,-14,-10,-10,-3,-11,-5,0,-6,-53,38,-60,-12,10,-8,-1,-127,6,7,2,-46,1,-1,-1,4, 
  /* [4][0][][] */ -2,-6,74,33,2,-12,-3,-2,6,-1,-9,-8,-83,0,-12,-3,0,9,2,1,70,8,0,0,-15,24,-10,59,-11,1,-7,98,6,4,-2,-5,9,-18,-25,-17,-3,-127,5,3,0,2,1,2, 
  /* [5][0][][] */ -7,48,2,-5,2,51,25,7,-19,33,13,60,24,0,-127,-2,0,10,-41,17,-11,7,-12,40,-26,-11,31,-10,-14,22,23,-18,53,29,-36,-10,15,16,-54,18,22,-10,-12,28,20,58,21,27, 
  /* [6][0][][] */ -24,-56,2,10,42,-33,-22,5,24,-26,-7,97,1,0,-127,38,0,-13,46,-21,-3,0,29,-38,31,1,2,-9,46,-17,-13,3,89,-32,26,-1,-1,-6,-66,-23,-16,-11,-7,-31,-17,-88,-19,-22, 
  /* [7][0][][] */ -104,-23,-7,3,127,12,66,30,11,2,21,-37,-22,0,81,103,0,16,9,60,-8,5,-32,46,18,10,40,13,51,62,59,-6,-11,-13,-30,-20,-1,25,20,33,70,-2,-24,-12,59,6,65,71, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.056737598031759262, 0.037175484001636505, 0.061437040567398071, 0.051235020160675049, 0.048453334718942642, 0.059651248157024384, 0.034179843962192535, 0.03209913894534111, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 82929, 62601, 61632, 41548, -131, 13614, 3446, 36387, 22822, 36036, 26314, 5786, -44244, -127, 34132, 796, -204, 53441, 489, 1484, -16277, 13996, 47927, 30460, -9562, 44630, 59453, 24713, -1390, 16850, -8505, -49746, 10844, 111553, 24782, 744, 65346, 914, 146886, -24532, 18103, -26271, -163, 112557, 1120, 49431, 1541, -21867, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.1274625952355564e-05, 6.4852261857595295e-05, 0.00013792076788377017, 0.00012234516907483339, 0.00014461966929957271, 0.0001890153216663748, 0.00012704588880296797, 5.2615432650782168e-05, 9.1105990577489138e-05, 3.0880059057381004e-05, 5.0620434194570407e-05, 2.9800246920785867e-05, 0.00015216886822599918, 0.005541567225009203, 7.6442280260380358e-05, 0.00020302619668655097, 0.0027484172023832798, 1.6993180906865746e-05, 0.00011109315528301522, 0.00017948745517060161, 0.00013318144192453474, 0.00010581154492683709, 0.0001276295370189473, 4.1803359636105597e-05, 6.6563276050146669e-05, 6.2252423958852887e-05, 2.3784818040439859e-05, 5.0648959586396813e-05, 0.00029477235511876643, 4.9806298193288967e-05, 4.9430756916990504e-05, 0.00014896637003403157, 0.00022127955162432045, 8.7738453657948412e-06, 0.00010048155672848225, 0.00025686458684504032, 1.4130972886050586e-05, 0.00035117138759233057, 3.1008625228423625e-05, 8.7065469415392727e-05, 5.360455543268472e-05, 0.00019830770906992257, 0.0001561894896440208, 9.8895225164596923e-06, 9.7019597887992859e-05, 0.00012055192928528413, 0.0002602867316454649, 8.9279419626109302e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -41,-21,-9,-17,7,-40,-78,-69,-27,-49,8,67,34,-71,114,-44,-113,-85,37,-5,-3,-69,-111,-81,-35,-122,-64,-25,70,15,96,28,-127,-88,-7,54,18,47,-127,78,-77,-12,104,-109,-3,-38,-87,108, 75,13,-31,-30,57,-127,-127,-80,64,-73,-114,112,38,-82,0,62,-52,-113,58,9,9,-110,-127,-72,-4,-127,-123,-38,-57,20,-59,54,29,-127,66,87,13,71,-93,127,-127,8,124,-127,1,-25,-127,95, -32,44,6,-4,-67,-110,-59,-16,88,-8,-127,41,8,-71,-100,-12,-127,-23,27,12,-16,-75,-36,-24,-11,-29,-60,-10,-12,17,-25,9,105,-88,73,32,15,35,-6,16,-79,4,7,-78,-18,3,-55,15, 
  /* [0][1][][] */ -85,-127,-44,-43,-10,55,98,-105,-28,-108,-21,110,90,-64,26,-97,-121,-94,89,-76,41,-87,-102,-127,41,-121,-79,-46,127,-60,127,84,-43,-83,-16,86,-36,-76,-108,88,41,59,103,-107,-92,-117,84,119, 127,-82,-127,-127,127,41,94,-127,102,-127,-110,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-119,-122,127,-102,-127,-127,-123,-127,-72,127,28,-112,127,127,-66,-127,-97,89,60,127,127,-111,-113,-127,126,127, -53,33,-61,-83,-121,-24,31,-37,127,-19,-78,34,56,-70,-26,-45,-37,-29,54,-71,59,-79,-39,-26,47,-8,-46,-61,14,-89,-35,20,28,-99,116,24,-38,-62,0,-15,36,53,9,-73,-58,-37,66,35, 
  /* [0][2][][] */ -61,-109,-32,-33,0,33,-7,-34,-40,-60,-18,58,75,-127,-127,-63,-43,-20,64,76,52,-32,-12,-60,33,-53,-10,-65,76,27,77,63,109,-28,-38,-8,-93,34,-20,30,9,36,15,-55,95,-78,4,31, 88,-74,-87,-85,81,18,5,-47,48,-70,-32,55,83,-26,15,93,-24,-32,77,120,82,-52,-18,-58,94,-66,-19,-99,-51,37,-47,111,-17,-49,67,6,-127,48,-17,-1,9,31,15,-65,127,-101,-12,39, -29,28,-41,-35,-81,-20,21,-10,60,-4,-13,32,30,-43,110,-30,-93,-6,31,60,76,-27,-1,-3,43,3,-5,-68,-14,26,-19,39,-89,-46,66,3,-20,20,24,-38,5,34,-5,-15,62,-34,-4,16, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0030291716102510691, 0.0027562212198972702, 0.0058616325259208679, 0.0051996693946421146, 0.0061463359743356705, 0.0080331508070230484, 0.0053994501940906048, 0.0022361557930707932, 0.0038720045704394579, 0.0013124025426805019, 0.0021513684187084436, 0.001266510458663106, 0.0064671770669519901, 0.23551659286022186, 0.0032487967982888222, 0.0086286133155226707, 0.1168077290058136, 0.00072221015579998493, 0.0047214590013027191, 0.0076282168738543987, 0.0056602112017571926, 0.0044969907030463219, 0.0054242555052042007, 0.0017766427481546998, 0.0028289391193538904, 0.0026457279454916716, 0.0010108547285199165, 0.0021525807678699493, 0.012527825310826302, 0.0021167676895856857, 0.002100807148963213, 0.0063310703262686729, 0.0094043808057904243, 0.00037288840394467115, 0.0042704660445451736, 0.010916744358837605, 0.00060056633083149791, 0.014924783259630203, 0.0013178664958104491, 0.0037002824246883392, 0.002278193598613143, 0.0084280772134661674, 0.006638052873313427, 0.00042030468466691673, 0.0041233329102396965, 0.0051234569400548935, 0.011062185280025005, 0.0037943751085549593, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 4911, 189, 11928, 6968, 8520, 7120, 12923, -67, 124, -386, 2211, 632, 14003, -100559040, 3721, 28845, -81176472, -133, -629, 14900, 5054, -26, 123, 551, 4176, -955, 100, 801, 5937, 1927, 3193, 17410, 3824, 425, 323, -2604, 463, 4639, -236, 15296, 2431, 12815, -408, -119, 15341, 295, 13147, 4549, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00042602210305631161, 0.00040270594763569534, 0.00026341713964939117, 0.00026923770201392472, 0.00023713889822829515, 0.00029231063672341406, 0.00029360965709201992, 0.0012103726621717215, 0.00026691367384046316, 0.0019230019534006715, 0.0006702037644572556, 0.0014218040741980076, 0.00015725905541330576, 1.6128203217391501e-09, 0.00070179993053898215, 0.00011593572708079591, 1.6128203217391501e-09, 0.0055005373433232307, 0.00033253402216359973, 0.00025959944468922913, 0.00021947965433355421, 0.004227563738822937, 0.00027295123436488211, 0.0011412401217967272, 0.00091225962387397885, 0.00059730408247560263, 0.0019117427291348577, 0.0016294782981276512, 0.00019807298667728901, 0.0015465989708900452, 0.00092063483316451311, 0.00013466404925566167, 0.00018634420121088624, 0.0076564638875424862, 0.00031147850677371025, 0.00046962196938693523, 0.0033847952727228403, 0.00027334614424034953, 0.0018968579825013876, 0.00022682968119625002, 0.0011602772865444422, 0.00016891570703592151, 0.0003502908512018621, 0.006938152015209198, 0.0003281841054558754, 0.00033963733585551381, 0.00021573167759925127, 0.00018765951972454786, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 17,-127,43,-44,20,-26,-41,35, 
  /* [1][0][][] */ 56,44,-21,-86,-7,-19,-66,127, 
  /* [2][0][][] */ 27,-1,-42,111,39,127,54,84, 
  /* [3][0][][] */ 78,70,-74,127,-99,-3,7,20, 
  /* [4][0][][] */ -35,-119,75,18,6,19,-43,-127, 
  /* [5][0][][] */ 7,15,-22,24,-5,-27,39,127, 
  /* [6][0][][] */ 55,20,-127,-72,96,35,79,-48, 
  /* [7][0][][] */ 127,12,16,-15,26,-7,89,-65, 
  /* [8][0][][] */ 13,-125,6,125,7,18,-4,-127, 
  /* [9][0][][] */ 89,-124,13,-6,-16,14,-127,81, 
  /* [10][0][][] */ -127,-30,-96,2,-2,1,-94,45, 
  /* [11][0][][] */ -18,-40,-7,-103,-127,-30,49,-15, 
  /* [12][0][][] */ 21,7,-33,67,-77,-14,79,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -4,-29,-7,9,41,127,40,42, 
  /* [15][0][][] */ 58,-10,7,-127,83,28,-53,95, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 10,18,127,27,-29,-2,29,28, 
  /* [18][0][][] */ 76,-127,17,36,-11,14,-99,7, 
  /* [19][0][][] */ -127,-13,31,83,-58,-39,-101,75, 
  /* [20][0][][] */ 34,37,-43,127,8,-123,-22,60, 
  /* [21][0][][] */ 49,24,127,10,-13,-6,60,6, 
  /* [22][0][][] */ -80,-13,-127,13,7,18,-117,-3, 
  /* [23][0][][] */ -101,106,-15,-24,-8,-10,127,-75, 
  /* [24][0][][] */ 3,-57,-47,73,-18,-71,87,127, 
  /* [25][0][][] */ 14,24,22,17,97,127,-56,-43, 
  /* [26][0][][] */ -87,-38,-127,10,11,27,-113,-15, 
  /* [27][0][][] */ 7,-36,-21,19,-42,127,68,32, 
  /* [28][0][][] */ -5,-21,-28,41,17,127,56,59, 
  /* [29][0][][] */ 94,17,127,-3,-21,-14,86,-19, 
  /* [30][0][][] */ -81,127,-22,-33,15,-9,94,-43, 
  /* [31][0][][] */ -39,-95,-21,-1,41,-74,127,109, 
  /* [32][0][][] */ 3,18,-47,123,-19,96,90,127, 
  /* [33][0][][] */ 7,62,-7,-110,9,-12,-13,127, 
  /* [34][0][][] */ -48,80,-7,-127,13,-30,26,108, 
  /* [35][0][][] */ 127,15,-4,-55,32,35,96,-64, 
  /* [36][0][][] */ -127,-11,34,52,-45,19,-120,80, 
  /* [37][0][][] */ -8,-25,-13,22,38,127,41,57, 
  /* [38][0][][] */ 12,21,11,92,127,-3,-13,35, 
  /* [39][0][][] */ 7,28,38,-127,20,-5,-40,116, 
  /* [40][0][][] */ 83,35,127,-10,-19,-6,95,-12, 
  /* [41][0][][] */ 1,-27,-33,69,38,127,80,97, 
  /* [42][0][][] */ -75,-14,127,23,-38,7,-36,50, 
  /* [43][0][][] */ -11,-59,11,114,-29,7,20,-127, 
  /* [44][0][][] */ 37,-8,-70,-127,56,-32,-7,-104, 
  /* [45][0][][] */ -91,127,-5,-64,1,-5,84,-52, 
  /* [46][0][][] */ -127,-14,36,13,-40,29,-73,31, 
  /* [47][0][][] */ 116,16,118,17,17,-28,127,-17, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.001039949944242835, 0.000983033562079072, 0.00064301979728043079, 0.00065722817089408636, 0.000578872743062675, 0.00071355083491653204, 0.00071672187186777592, 0.0029546050354838371, 0.00065155507763847709, 0.0046941833570599556, 0.0016360145527869463, 0.0034707239829003811, 0.00038388042594306171, 3.937008052901092e-09, 0.0017131430795416236, 0.00028300727717578411, 3.937008052901092e-09, 0.013427198864519596, 0.00081173900980502367, 0.00063370051793754101, 0.00053576531354337931, 0.010319780558347702, 0.00066629319917410612, 0.0027858475223183632, 0.0022268900647759438, 0.0014580613933503628, 0.0046666986308991909, 0.0039776712656021118, 0.00048351011355407536, 0.0037753570359200239, 0.0022473344579339027, 0.00032872444717213511, 0.00045487930765375495, 0.018689967691898346, 0.00076034094672650099, 0.0011463803239166737, 0.0082625234499573708, 0.00066725717624649405, 0.0046303640119731426, 0.0005537072429433465, 0.0028323186561465263, 0.00041233515366911888, 0.00085508462507277727, 0.016936518251895905, 0.00080112053547054529, 0.00082907866453751922, 0.0005266162334010005, 0.00045809010043740273, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -130, -39033, -6558, -12013, -31623, -1398, -24852, -22769, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0019972238223999739, 0.0018154007848352194, 0.0023833306040614843, 0.00096974498592317104, 0.001214134506881237, 0.0028170938603579998, 0.0013926735846325755, 0.00096470827702432871, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-20,-5,-6,127,-12,3,-3,1,-117,-83,0,0,116,3,0, 
  /* [1][0][][] */ 0,-28,-2,85,68,8,18,1,1,-7,127,-45,0,30,-14,0, 
  /* [2][0][][] */ 0,-6,1,-12,-60,4,10,2,1,4,-20,3,0,127,-12,0, 
  /* [3][0][][] */ 0,5,-17,-127,81,10,66,5,1,64,2,37,0,4,24,0, 
  /* [4][0][][] */ 0,49,-17,32,-48,24,127,1,-1,-58,16,-5,0,-9,26,0, 
  /* [5][0][][] */ 0,-11,-7,-1,-20,-19,-22,11,0,8,-4,-37,0,-5,127,0, 
  /* [6][0][][] */ 0,12,0,3,48,-10,-32,-8,1,-109,114,59,0,127,57,0, 
  /* [7][0][][] */ 0,18,-16,127,1,-9,7,2,0,65,-50,71,0,-3,44,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.084882006049156189, 0.077154532074928284, 0.10129155218601227, 0.041214160621166229, 0.051600717008113861, 0.11972648650407791, 0.059188626706600189, 0.041000101715326309, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 25640, 27218, 14007, 17417, 160230, 17466, 72244, -8926, 9074, 32965, 10908, -445, 27302, 13255, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.0001038897898979485, 0.00014774406736250967, 0.00024180562468245625, 0.00011742671631509438, 2.0730096366605721e-05, 0.00029939625528641045, 5.4050611652201042e-05, 2.201068855356425e-05, 0.00020645212498493493, 0.00016172837058547884, 0.00053847767412662506, 0.00072724185883998871, 0.0002277622843394056, 0.00016076763859018683, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-126,38,-67,79,-76,-90,-3,-8,29,-127,4,54,-73, 51,24,-127,127,127,-127,127,-127,-85,127,-127,52,-105,5,127,-25, 24,-25,89,-2,-73,67,-95,78,-95,-27,4,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-23,14,-44,16,-29,14,-28,0,3,-109,-49,8,-29,-14, -78,-42,-58,-14,-8,-26,7,-28,-108,-89,21,-11,-104,-127,1,23, 14,1,64,2,2,34,-26,34,-127,7,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,67,2,-7,39,-40,52,-76,0,-1,5,40,2,-27,23, 23,-5,30,-1,-27,40,-35,21,-125,-13,0,84,-58,0,-28,-111, 21,-8,18,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0044153160415589809, 0.0062791230157017708, 0.010276738554239273, 0.0049906354397535324, 0.00088102906011044979, 0.01272434089332819, 0.0022971509024500847, 0.00093545421259477735, 0.00877421535551548, 0.0068734558299183846, 0.02288530021905899, 0.030907778069376945, 0.0096798967570066452, 0.0068326247856020927, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 11149, -76489, 7253, 271057, 31661, 73918, 12894, -216202, 14838, 28487, 864932, -1073741824, 45490, 128305, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00023958047677297145, 0.00022783756139688194, 3.9838094380684197e-05, 1.0315830877516419e-05, 0.00017650196969043463, 3.7297064409358427e-05, 0.00029057770734652877, 5.8592249843059108e-06, 9.4291935965884477e-05, 0.00010658374958438799, 6.8190861384209711e-06, 1.1533876076441629e-09, 8.4563362179324031e-05, 2.0114566723350435e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 43,-10,30, -2,-23,16, -127,-123,-68, 
  /* [1][1][][] */ 5,-4,3, -13,8,0, 5,-29,6, 
  /* [1][2][][] */ 0,20,3, 3,12,3, 43,-17,14, 
  /* [2][0][][] */ 25,-4,-16, 71,114,-8, 33,-39,-1, 
  /* [2][1][][] */ 4,13,-12, 65,127,-35, 16,-4,-13, 
  /* [2][2][][] */ 39,-67,8, 65,-42,-29, 25,-53,8, 
  /* [3][0][][] */ 14,31,6, 50,106,27, 8,13,-4, 
  /* [3][1][][] */ 24,28,8, 82,127,28, -6,-16,5, 
  /* [3][2][][] */ 9,-2,8, 36,25,11, 7,-1,5, 
  /* [4][0][][] */ 94,82,-23, 60,97,-27, 9,22,-14, 
  /* [4][1][][] */ 94,100,69, 71,127,34, 63,67,-31, 
  /* [4][2][][] */ 98,77,62, 80,117,25, -19,8,23, 
  /* [5][0][][] */ 4,-3,-127, -7,-4,-111, -15,21,-36, 
  /* [5][1][][] */ 5,-44,-126, 0,-46,-114, -8,7,-32, 
  /* [5][2][][] */ -6,7,-16, -2,-6,-14, -8,5,-20, 
  /* [6][0][][] */ 27,-63,30, 50,-87,36, 14,-17,8, 
  /* [6][1][][] */ 40,-94,59, 67,-127,68, 13,-26,15, 
  /* [6][2][][] */ 23,-33,12, 17,-44,23, -8,9,-3, 
  /* [7][0][][] */ -31,16,8, -94,-37,4, -14,24,6, 
  /* [7][1][][] */ -18,-8,4, -127,-90,-5, -7,-5,8, 
  /* [7][2][][] */ -23,29,-5, -14,9,2, -19,25,2, 
  /* [8][0][][] */ 113,127,63, 115,127,62, 115,120,59, 
  /* [8][1][][] */ 115,127,63, 115,124,60, 115,118,56, 
  /* [8][2][][] */ 113,115,49, 114,113,46, 113,79,43, 
  /* [9][0][][] */ -29,-5,11, -24,-10,0, -9,-5,-14, 
  /* [9][1][][] */ 78,103,-9, 63,127,19, -12,18,22, 
  /* [9][2][][] */ -33,-31,1, -2,-30,-8, 4,5,-23, 
  /* [10][0][][] */ -26,-81,-17, 32,94,20, -10,-12,-2, 
  /* [10][1][][] */ -59,-100,-13, 77,127,16, -19,-26,0, 
  /* [10][2][][] */ -32,-18,3, 34,24,-10, -10,0,7, 
  /* [11][0][][] */ -20,-27,-11, 10,-43,0, 11,-100,-60, 
  /* [11][1][][] */ -60,-47,-33, -46,-70,-50, -22,-62,-69, 
  /* [11][2][][] */ -25,-55,-99, 113,127,57, -53,5,-62, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -53,-93,-16, -63,-107,-23, -11,-14,-4, 
  /* [13][1][][] */ 58,114,16, 54,127,25, 5,18,12, 
  /* [13][2][][] */ -12,-18,4, -3,-17,-1, -3,6,-3, 
  /* [14][0][][] */ 46,-5,-38, 79,-27,-51, 31,-12,-22, 
  /* [14][1][][] */ 86,-17,-76, 127,-42,-92, 59,-22,-41, 
  /* [14][2][][] */ 50,-12,-50, 73,-23,-57, 25,-10,-24, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.06109301745891571, 0.058098573237657547, 0.010158713907003403, 0.0026305366773158312, 0.045007999986410141, 0.0095107508823275566, 0.074097312986850739, 0.0014941022964194417, 0.024044442921876907, 0.027178853750228882, 0.0017388669075444341, 2.9411381774480105e-07, 0.021563656628131866, 0.0051292143762111664, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.4096563458442688, } };
const TfArray<1, int> quant46_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.3857538104057312, } };
const TfArray<1, int> quant50_zero = { 1, { 32 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.35447672009468079, } };
const TfArray<1, int> quant53_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.50487709045410156, } };
const TfArray<1, int> quant54_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.21768641471862793, } };
const TfArray<1, int> quant58_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.186081662774086, } };
const TfArray<1, int> quant61_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.25114816427230835, } };
const TfArray<1, int> quant62_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.19893777370452881, } };
const TfArray<1, int> quant65_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.28360778093338013, } };
const TfArray<1, int> quant66_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.053177200257778168, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.13567225635051727, } };
const TfArray<1, int> quant69_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension47, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension50, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension51, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension53, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension55, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension57, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9840), (TfLiteIntArray*)&g0::tensor_dimension58, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension59, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension61, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8640), (TfLiteIntArray*)&g0::tensor_dimension62, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension63, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4032), (TfLiteIntArray*)&g0::tensor_dimension65, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension66, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension68, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 144), (TfLiteIntArray*)&g0::tensor_dimension69, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
